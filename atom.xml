<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ZQ的学习笔记</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-07-23T12:02:42.618Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>ZQ Liu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python</title>
    <link href="http://yoursite.com/2020/07/22/python/"/>
    <id>http://yoursite.com/2020/07/22/python/</id>
    <published>2020-07-22T08:38:08.000Z</published>
    <updated>2020-07-23T12:02:42.618Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Task2-作业"><a href="#Task2-作业" class="headerlink" title="Task2_作业"></a>Task2_作业</h3><h4 id="1-编写一个Python程序来查找那些既可以被7整除又可以被5整除的数字，介于1500和2700之间。"><a href="#1-编写一个Python程序来查找那些既可以被7整除又可以被5整除的数字，介于1500和2700之间。" class="headerlink" title="1. 编写一个Python程序来查找那些既可以被7整除又可以被5整除的数字，介于1500和2700之间。"></a>1. 编写一个Python程序来查找那些既可以被7整除又可以被5整除的数字，介于1500和2700之间。</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1500</span>,<span class="number">2700</span>) <span class="keyword">if</span> (i%<span class="number">5</span>) == <span class="number">0</span> <span class="keyword">and</span> (i%<span class="number">7</span>) == <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">==&gt;[1505, 1540, 1575, 1610, 1645, 1680, 1715, 1750, 1785, 1820, 1855, 1890, 1925, 1960, 1995, 2030, 2065, 2100, 2135, 2170, 2205, 2240, 2275, 2310, 2345, 2380, 2415, 2450, 2485, 2520, 2555, 2590, 2625, 2660, 2695]</span><br></pre></td></tr></table></figure><h4 id="2-龟兔赛跑游戏"><a href="#2-龟兔赛跑游戏" class="headerlink" title="2. 龟兔赛跑游戏"></a>2. 龟兔赛跑游戏</h4><p>题目描述：任一秒结束后兔子发现自己<strong>领先**</strong>x米<strong>或以上，会停下</strong>s秒**。对于不同的兔子，x，s的数值是不同的，但是所有的乌龟却是一致——它们不到终点决不停止。</p><p><strong>兔子的速度v1</strong>（表示每秒兔子能跑v1 米），<strong>乌龟的速度v2</strong>，以及兔子对应的x，s值，以及<strong>赛道的长度l</strong>——就能预测出比赛的结果。写一个程序，对于输入的一场比赛的数据v1，v2，x，s，l，预测该场比赛的结果。</p><p>输入: 输入只有一行，包含用空格隔开的五个正整数v1，v2，x，s，l，其中(v1,v2&lt; =100;x&lt; =300;s&lt; =10;l&lt; =10000且为v1,v2的公倍数)</p><p>输出: 输出包含两行，第一行输出比赛结果——一个大写字母“T”或“R”或“D”，分别表示乌龟获胜，兔子获胜，或者两者同时到达终点。</p><p>第二行输出一个正整数，表示获胜者（或者双方同时）到达终点所耗费的时间（秒数）。</p><blockquote><p>样例输入：</p><p>10  5  5  2  20</p><p>样例输出</p><p>D<br> 4</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">end</span><span class="params">(l_1,l_2)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> l_1 <span class="keyword">or</span> l_2 &gt;= l: <span class="comment">#有一方到达终点</span></span><br><span class="line">        <span class="keyword">if</span> l_1 == l_2 == l:</span><br><span class="line">            <span class="keyword">return</span> (<span class="string">"D"</span>) <span class="comment">#同时</span></span><br><span class="line">        <span class="keyword">elif</span> l_1 &gt; l_2: </span><br><span class="line">            <span class="keyword">return</span> (<span class="string">"R"</span>) <span class="comment">#兔子赢</span></span><br><span class="line">        <span class="keyword">elif</span> l_1 &lt; l_2 : </span><br><span class="line">            <span class="keyword">return</span> <span class="string">"T"</span> <span class="comment">#乌龟赢</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">competition</span><span class="params">(v1:int,v2:int,x:int,s:int,l:int)</span>:</span></span><br><span class="line">    l_1,l_2,t = <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">    l_1 = v1*t</span><br><span class="line">    l_2 = v2*t</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> true :</span><br><span class="line">        t+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> l_1-l_2 &lt; x : <span class="comment">#兔子不领先</span></span><br><span class="line">            l_1 += v1*t</span><br><span class="line">            l_2 += v2*t</span><br><span class="line">            end(l_1,l_2)</span><br><span class="line">        <span class="keyword">else</span>:</span><br></pre></td></tr></table></figure><h3 id="Task1-作业"><a href="#Task1-作业" class="headerlink" title="Task1_作业"></a>Task1_作业</h3><ol><li>怎样对python中的代码进行注释？</li></ol><ul><li><p><code>#</code>注释单行</p></li><li><p><code>&#39;&#39;&#39; &#39;&#39;&#39;</code> 或者 <code>&quot;&quot;&quot; &quot;&quot;&quot;</code> 表示区间注释，中间内容被注释</p></li><li>快捷键<code>cmd</code>+<code>?</code>，可以通过<code>#</code>快速注释多行 </li></ul><ol><li>python有哪些运算符，这些运算符的优先级是怎样的？</li></ol><ul><li><p>算术运算符：+、-、*、/、%、**、//</p></li><li><p>比较运算符：==、!=、&gt;、&lt;、&gt;=、&lt;=</p></li><li><p>赋值运算符：=、 +=、 -=、 <em>=、 /=、 %=、 *</em>=、 //=、 ==:=（海象运算符，3.8新增）==</p></li><li><p>位运算符：&amp;、 | 、^ 、~</p></li><li><p>逻辑运算符：and 、or、not</p></li><li><p>成员运算符：in、not in</p></li><li><p>身份运算符：is 、not is</p><p><strong>优先级：</strong> </p><p>| 运算符                   | 描述                                                   |<br>| ———————————— | ——————————————————————————— |<br>| <strong>                       | 指数 (最高优先级)                                      |<br>| ~ + -                    | 按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@) |<br>| <em> / % //                 | 乘，除，求余数和取整除                                 |<br>| + -                      | 加法减法                                               |<br>| &gt;&gt; &lt;&lt;                    | 右移，左移运算符                                       |<br>| &amp;                        | 位 ‘AND’                                               |<br>| ^ |                     | 位运算符                                               |<br>| &lt;= &lt; &gt; &gt;=                | 比较运算符                                             |<br>| == !=                    | 等于运算符                                             |<br>| = %= /= //= -= += </em>= </strong>= | 赋值运算符                                             |<br>| is is not                | 身份运算符                                             |<br>| in not in                | 成员运算符                                             |<br>| not and or               | 逻辑运算符                                             |</p></li></ul><ol><li>python 中 <code>is</code>, <code>is not</code> 与 <code>==</code>, <code>!=</code> 的区别是什么？</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">身份运算符用于比较两个对象的存储单元，</span><br><span class="line">is 用于判断两个变量引用对象是否为同一个， &#x3D;&#x3D; 用于判断引用变量的值是否相等。</span><br></pre></td></tr></table></figure><ol><li>python 中包含哪些数据类型？这些数据类型之间如何转换？</li></ol><ul><li><p>Number（数字）——不可变数据</p></li><li><p>String（字符串）——不可变数据</p></li><li><p>Tuple（元组）——不可变数据</p></li><li><p>List（列表）——可变数据</p></li><li><p>Set（集合）——可变数据</p></li><li><p>Dictionary（字典）——可变数据</p></li></ul><div class="table-container"><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>int(x [,base])</td><td>将x转换为一个整数</td></tr><tr><td>float(x)</td><td>将x转换到一个浮点数</td></tr><tr><td>complex(real [,imag])</td><td>创建一个复数</td></tr><tr><td>str(x)</td><td>将对象 x 转换为字符串</td></tr><tr><td>repr(x)</td><td>将对象 x 转换为表达式字符串</td></tr><tr><td>eval(str)</td><td>用来计算在字符串中的有效Python表达式,并返回一个对象</td></tr><tr><td>tuple(s)</td><td>将序列 s 转换为一个元组</td></tr><tr><td>list(s)</td><td>将序列 s 转换为一个列表</td></tr><tr><td>set(s)</td><td>转换为可变集合</td></tr><tr><td>dict(d)</td><td>创建一个字典。d 必须是一个 (key, value)元组序列。</td></tr><tr><td>frozenset(s)</td><td>转换为不可变集合</td></tr><tr><td>chr(x)</td><td>将一个整数转换为一个字符</td></tr><tr><td>ord(x)</td><td>将一个字符转换为它的整数值</td></tr><tr><td>hex(x)</td><td>将一个整数转换为一个十六进制字符串</td></tr><tr><td>oct(x)</td><td>将一个整数转换为一个八进制字符串</td></tr></tbody></table></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Task2-作业&quot;&gt;&lt;a href=&quot;#Task2-作业&quot; class=&quot;headerlink&quot; title=&quot;Task2_作业&quot;&gt;&lt;/a&gt;Task2_作业&lt;/h3&gt;&lt;h4 id=&quot;1-编写一个Python程序来查找那些既可以被7整除又可以被5整除的数字，介于15
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>赛题理解、数据读取与数据分析</title>
    <link href="http://yoursite.com/2020/07/21/%E8%B5%9B%E9%A2%98%E7%90%86%E8%A7%A3/"/>
    <id>http://yoursite.com/2020/07/21/%E8%B5%9B%E9%A2%98%E7%90%86%E8%A7%A3/</id>
    <published>2020-07-21T07:45:04.000Z</published>
    <updated>2020-07-23T02:00:23.705Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、赛题数据"><a href="#一、赛题数据" class="headerlink" title="一、赛题数据"></a>一、赛题数据</h2><h3 id="数据说明"><a href="#数据说明" class="headerlink" title="数据说明"></a>数据说明</h3><p>数据为新闻文本，并按照字符级别进行匿名处理。整合划分出14个候选分类类别。</p><p>数据：训练集20w条样本，测试集A包括5w条样本，测试集B包括5w条样本。</p><div class="table-container"><table><thead><tr><th style="text-align:center">label</th><th style="text-align:center">text</th></tr></thead><tbody><tr><td style="text-align:center">6</td><td style="text-align:center">57 44 66 56 2 3 3 37 5 41 9 57 44 47 45 33 13 63 58 31 17 47 0 1 1 69 26 60 62 15 21 12 49 18 38 20 50 23 57 44 45 33 25 28 47 22 52 35 30 14 24 69 54 7 48 19 11 51 16 43 26 34 53 27 64 8 4 42 36 46 65 69 29 39 15 37 57 44 45 33 69 54 7 25 40 35 30 66 56 47 55 69 61 10 60 42 36 46 65 37 5 41 32 67 6 59 47 0 1 1 68</td></tr></tbody></table></div><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;'科技': 0, '股票': 1, '体育': 2, '娱乐': 3, '时政': 4, '社会': 5, '教育': 6, '财经': 7, '家居': 8, '游戏': 9, '房产': 10, '时尚': 11, '彩票': 12, '星座': 13&#125;</span><br></pre></td></tr></table></figure><h3 id="数据展示"><a href="#数据展示" class="headerlink" title="数据展示"></a>数据展示</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">train_df &#x3D; pd.read_csv(&#39;.&#x2F;train_set.csv&#39;, sep&#x3D;&#39;\t&#39;)</span><br><span class="line">train_df.head(10)</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ggyss3lah2j30lo0dkad2.jpg" alt="image-20200721190250430"></p><h2 id="二、评测标准"><a href="#二、评测标准" class="headerlink" title="二、评测标准"></a>二、评测标准</h2><script type="math/tex; mode=display">F 1=2 * \frac{(\text {precision } * \text {recall})}{(\text {precision}+\text {recall})}</script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> f1_score</span><br><span class="line">y_true = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">y_pred = [<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">f1_score(y_true, y_pred, average=<span class="string">'macro'</span>)</span><br></pre></td></tr></table></figure><h2 id="三、解题思路"><a href="#三、解题思路" class="headerlink" title="三、解题思路"></a>三、解题思路</h2><p>赛题给出的数据是匿名化的，不能直接使用中文分词等操作，这个是赛题的难点。文本数据是一种典型的非结构化数据，因此可能涉及到<code>特征提取</code>和<code>分类模型</code>两个部分。提供了一些解题思路供大家参考：</p><ul><li><p>思路1：TF-IDF + 机器学习分类器</p><p>直接使用TF-IDF对文本提取特征，并使用分类器进行分类。在分类器的选择上，可以使用SVM、LR、或者XGBoost。</p></li><li><p>思路2：FastText</p><p>FastText是入门款的词向量，利用Facebook提供的FastText工具，可以快速构建出分类器。</p></li><li><p>思路3：WordVec + 深度学习分类器</p><p>WordVec是进阶款的词向量，并通过构建深度学习分类完成分类。深度学习分类的网络结构可以选择TextCNN、TextRNN或者BiLSTM。</p></li><li><p>思路4：Bert词向量</p><p>Bert是高配款的词向量，具有强大的建模学习能力。</p></li></ul><h2 id="四、数据分析"><a href="#四、数据分析" class="headerlink" title="四、数据分析"></a>四、数据分析</h2><ul><li><h4 id="句子长度分析"><a href="#句子长度分析" class="headerlink" title="句子长度分析"></a>句子长度分析</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">%pylab inline</span><br><span class="line">train_df[<span class="string">'text_len'</span>] = train_df[<span class="string">'text'</span>].apply(<span class="keyword">lambda</span> x: len(x.split(<span class="string">' '</span>)))</span><br><span class="line">print(train_df[<span class="string">'text_len'</span>].describe())</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh0obuu3rpj30kw0akacv.jpg" alt="image-20200723094940092"></p><ul><li>直方图展示</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">_ = plt.hist(train_df[<span class="string">'text_len'</span>], bins=<span class="number">200</span>)</span><br><span class="line">plt.xlabel(<span class="string">'Text char count'</span>)</span><br><span class="line">plt.title(<span class="string">"Histogram of char count"</span>)</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh0obygz6kj314a0qwwh0.jpg" alt="image-20200723095221681"></p></li><li><h4 id="类别分布"><a href="#类别分布" class="headerlink" title="类别分布"></a>类别分布</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">train_df[<span class="string">'label'</span>].value_counts().plot(kind=<span class="string">'bar'</span>)</span><br><span class="line">plt.title(<span class="string">'News class count'</span>)</span><br><span class="line">plt.xlabel(<span class="string">"category"</span>)</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gh0oc3jfjpj30p20gwjsp.jpg" alt="image-20200723095143548"></p></li><li><h4 id="字符分布统计"><a href="#字符分布统计" class="headerlink" title="字符分布统计"></a>字符分布统计</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line">all_lines = <span class="string">' '</span>.join(list(train_df[<span class="string">'text'</span>]))</span><br><span class="line">word_count = Counter(all_lines.split(<span class="string">" "</span>))</span><br><span class="line">word_count = sorted(word_count.items(), key=<span class="keyword">lambda</span> d:d[<span class="number">1</span>], reverse = <span class="literal">True</span>)</span><br><span class="line">print(len(word_count))</span><br><span class="line">print(word_count[<span class="number">0</span>])</span><br><span class="line">print(word_count[<span class="number">-1</span>])</span><br></pre></td></tr></table></figure></li></ul><h3 id="分析结论"><a href="#分析结论" class="headerlink" title="分析结论"></a>分析结论</h3><ol><li>字符个数平均为1000个，可能需要截断</li><li>类别分布不均匀，会严重影响模型的精度</li><li>总共包括7000-8000个字符</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、赛题数据&quot;&gt;&lt;a href=&quot;#一、赛题数据&quot; class=&quot;headerlink&quot; title=&quot;一、赛题数据&quot;&gt;&lt;/a&gt;一、赛题数据&lt;/h2&gt;&lt;h3 id=&quot;数据说明&quot;&gt;&lt;a href=&quot;#数据说明&quot; class=&quot;headerlink&quot; title=&quot;数
      
    
    </summary>
    
    
    
      <category term="打卡" scheme="http://yoursite.com/tags/%E6%89%93%E5%8D%A1/"/>
    
  </entry>
  
  <entry>
    <title>MAC安装NVM及管理node</title>
    <link href="http://yoursite.com/2020/07/17/MAC%E5%AE%89%E8%A3%85NVM%E5%8F%8Anode/"/>
    <id>http://yoursite.com/2020/07/17/MAC%E5%AE%89%E8%A3%85NVM%E5%8F%8Anode/</id>
    <published>2020-07-17T01:31:00.000Z</published>
    <updated>2020-07-17T01:53:35.687Z</updated>
    
    <content type="html"><![CDATA[<h2 id="NVM"><a href="#NVM" class="headerlink" title="NVM"></a>NVM</h2><h3 id="Installing-and-Updating"><a href="#Installing-and-Updating" class="headerlink" title="Installing and Updating"></a>Installing and Updating</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#任选其一</span></span><br><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash</span><br><span class="line">wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash</span><br></pre></td></tr></table></figure><p>在bash_profile和zshrc添加如下语句。source更新。（用那个就添加那个，我两个都添加了）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export NVM_DIR&#x3D;&quot;$HOME&#x2F;.nvm&quot;</span><br><span class="line">[ -s &quot;$NVM_DIR&#x2F;nvm.sh&quot; ] &amp;&amp; \. &quot;$NVM_DIR&#x2F;nvm.sh&quot;  # This loads nvm</span><br><span class="line">[ -s &quot;$NVM_DIR&#x2F;bash_completion&quot; ] &amp;&amp; \. &quot;$NVM_DIR&#x2F;bash_completion&quot;  # This loads nvm bash_completion</span><br></pre></td></tr></table></figure><p>输入 nvm 检查能否正常</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ nvm</span><br><span class="line">--&gt; Node Version Manager (v0.35.3)</span><br><span class="line">（....略）</span><br></pre></td></tr></table></figure><h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><p>查看当前ndoe</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ nvm ls</span><br><span class="line">--&gt;      v12.14.1</span><br><span class="line">         system</span><br><span class="line">default -&gt; 12.14.1 (-&gt; v12.14.1)</span><br><span class="line">node -&gt; stable (-&gt; v12.14.1) (default)</span><br><span class="line">stable -&gt; 12.14 (-&gt; v12.14.1) (default)</span><br></pre></td></tr></table></figure><p>可以看到目前系统使用的node是12.14.1</p><p>使用 “nvm install ” 安装指定版本的 node</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ nvm install v11.10.0</span><br><span class="line"></span><br><span class="line">$ nvm ls</span><br><span class="line">    v11.10.1</span><br><span class="line">-&gt;     v12.14.1</span><br><span class="line">         system</span><br><span class="line">default -&gt; 12.14.1 (-&gt; v12.14.1)</span><br><span class="line">node -&gt; stable (-&gt; v12.14.1) (default)</span><br><span class="line">stable -&gt; 12.14 (-&gt; v12.14.1) (default)</span><br></pre></td></tr></table></figure><p>现在已经有两个版本的 node 了,使用 “nvm use ” 可以切换 node 版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nvm use 11.10.1</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;NVM&quot;&gt;&lt;a href=&quot;#NVM&quot; class=&quot;headerlink&quot; title=&quot;NVM&quot;&gt;&lt;/a&gt;NVM&lt;/h2&gt;&lt;h3 id=&quot;Installing-and-Updating&quot;&gt;&lt;a href=&quot;#Installing-and-Updating&quot; c
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>777.在LR字符串中交换相邻字符</title>
    <link href="http://yoursite.com/2020/06/20/777-%E5%9C%A8LR%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E4%BA%A4%E6%8D%A2%E7%9B%B8%E9%82%BB%E5%AD%97%E7%AC%A6/"/>
    <id>http://yoursite.com/2020/06/20/777-%E5%9C%A8LR%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E4%BA%A4%E6%8D%A2%E7%9B%B8%E9%82%BB%E5%AD%97%E7%AC%A6/</id>
    <published>2020-06-20T02:16:16.000Z</published>
    <updated>2020-06-22T02:39:41.660Z</updated>
    
    <content type="html"><![CDATA[<p><strong>题目描述：</strong>在一个由 <code>&#39;L&#39;</code> , <code>&#39;R&#39;</code> 和 <code>&#39;X&#39;</code> 三个字符组成的字符串（例如<code>&quot;RXXLRXRXL&quot;</code>）中进行移动操作。一次移动操作指用一个<code>&quot;LX&quot;</code>替换一个<code>&quot;XL&quot;</code>，或者用一个<code>&quot;XR&quot;</code>替换一个<code>&quot;RX&quot;</code>。现给定起始字符串<code>start</code>和结束字符串<code>end</code>，请编写代码，当且仅当存在一系列移动操作使得<code>start</code>可以转换成<code>end</code>时， 返回<code>True</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入: start &#x3D; &quot;RXXLRXRXL&quot;, end &#x3D; &quot;XRLXXRRLX&quot;</span><br><span class="line">输出: True</span><br><span class="line">解释:</span><br><span class="line">我们可以通过以下几步将start转换成end:</span><br><span class="line">RXXLRXRXL -&gt;</span><br><span class="line">XRXLRXRXL -&gt;</span><br><span class="line">XRLXRXRXL -&gt;</span><br><span class="line">XRLXXRRXL -&gt;</span><br><span class="line">XRLXXRRLX</span><br></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="官方法一"><a href="#官方法一" class="headerlink" title="官方法一"></a>官方法一</h3><ul><li><p><strong>转换不变性：</strong>字符串中的 <code>&#39;L&#39;</code> 和 <code>&#39;R&#39;</code> 是不会互相穿插的，意味着开始和结束的字符串如果只看 <code>&#39;L&#39;</code> 和 <code>&#39;R&#39;</code> 的话是一模一样的。</p></li><li><p><strong>可到达性：</strong>设 $(i_1, i_2, \cdots )，(i^{‘}_1, i^{‘}_2, \cdots )$为每个字符 ‘L’ 在原始字符串和目标字符串的位置，$(j_1, j_2, \cdots )(j^{‘}_1, j^{‘}_2, \cdots )$为每个字符 ‘R’ 在原始字符串和目标字符串的位置，如果$i_k \geq i^{‘}_k $和 $j_k \leq j^{‘}_k $都能满足，这个字符串就是 ”可到达的“。</p><blockquote><p>L只能向左移，R只能向右移</p></blockquote></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">canTransform</span><span class="params">(start, end)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> start.replace(<span class="string">'X'</span>,<span class="string">''</span>) != end.replace(<span class="string">'X'</span>, <span class="string">''</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (symbol, op) <span class="keyword">in</span> ((<span class="string">'L'</span>, operator.ge), (<span class="string">'R'</span>, operator.le)):</span><br><span class="line">          <span class="comment"># ge() &gt;=  ; le() &lt;= </span></span><br><span class="line">            B = (i <span class="keyword">for</span> i, c <span class="keyword">in</span> enumerate(end) <span class="keyword">if</span> c == symbol)</span><br><span class="line">            <span class="keyword">for</span> i, c <span class="keyword">in</span> enumerate(start):</span><br><span class="line">                <span class="keyword">if</span> c == symbol <span class="keyword">and</span> <span class="keyword">not</span> op(i, next(B)):</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><ul><li><p>enumerate() 函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">enumerate(sequence, [start=<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    sequence -- 一个序列、迭代器或其他支持迭代对象。</span><br><span class="line">    start -- 下标起始位置。</span><br><span class="line">    返回 enumerate(枚举) 对象</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;seq = [<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i, element <span class="keyword">in</span> enumerate(seq):</span><br><span class="line"><span class="meta">... </span>    print( i, element)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="number">0</span> one</span><br><span class="line"><span class="number">1</span> two</span><br><span class="line"><span class="number">2</span> three</span><br></pre></td></tr></table></figure></li></ul><h3 id="官方解二：双指针"><a href="#官方解二：双指针" class="headerlink" title="官方解二：双指针"></a>官方解二：双指针</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">canTransform</span><span class="params">(self, start, end)</span>:</span></span><br><span class="line">        <span class="comment"># For (i, x) and (j, y) in enumerate(start), enumerate(end)</span></span><br><span class="line">        <span class="comment"># where x != 'X' and y != 'X',</span></span><br><span class="line">        <span class="comment"># and where if one exhausts early, it's elements are (None, None),...</span></span><br><span class="line">        <span class="keyword">for</span> (i, x), (j, y) <span class="keyword">in</span> itertools.zip_longest(</span><br><span class="line">                ((i, x) <span class="keyword">for</span> i, x <span class="keyword">in</span> enumerate(start) <span class="keyword">if</span> x != <span class="string">'X'</span>),</span><br><span class="line">                ((j, y) <span class="keyword">for</span> j, y <span class="keyword">in</span> enumerate(end) <span class="keyword">if</span> y != <span class="string">'X'</span>),</span><br><span class="line">                fillvalue = (<span class="literal">None</span>, <span class="literal">None</span>)):</span><br><span class="line"></span><br><span class="line">            <span class="comment"># If not solid or accessible, return False</span></span><br><span class="line">            <span class="keyword">if</span> x != y <span class="keyword">or</span> (x == <span class="string">'L'</span> <span class="keyword">and</span> i &lt; j) <span class="keyword">or</span> (x == <span class="string">'R'</span> <span class="keyword">and</span> i &gt; j):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><ul><li><p>zip()、zip.longest()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">b = [<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line">print(list(zip(a,b))) <span class="comment"># 两个可迭代参数长度不同时，按最短的组合输出</span></span><br><span class="line"><span class="comment"># 输出：[(1, 5), (2, 6), (3, 7)]</span></span><br><span class="line"></span><br><span class="line">print(list(zip_longest(a,b)))<span class="comment">#按最长的输出，长度不足的用None进行代替</span></span><br><span class="line"><span class="comment"># 输出：[(1, 5), (2, 6), (3, 7), (4, None)]</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="用时最快"><a href="#用时最快" class="headerlink" title="用时最快"></a>用时最快</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">canTransform</span><span class="params">(self,star,end)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> start.replace(<span class="string">'X'</span>,<span class="string">''</span>)!= end.replace(<span class="string">'x'</span>,<span class="string">''</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        sl,el,sr,er = <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(start)):</span><br><span class="line">            <span class="keyword">if</span> start[i]==<span class="string">'L'</span>:</span><br><span class="line">                sl+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> start[i]==<span class="string">'R'</span>:</span><br><span class="line">                sr+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> end[i]==<span class="string">'L'</span>:</span><br><span class="line">                el+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> end[i]==<span class="string">'R'</span>:</span><br><span class="line">                er+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> sl&gt;el <span class="keyword">or</span> sr&lt;er:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;题目描述：&lt;/strong&gt;在一个由 &lt;code&gt;&amp;#39;L&amp;#39;&lt;/code&gt; , &lt;code&gt;&amp;#39;R&amp;#39;&lt;/code&gt; 和 &lt;code&gt;&amp;#39;X&amp;#39;&lt;/code&gt; 三个字符组成的字符串（例如&lt;code&gt;&amp;quot;RXXLRX
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>136.Single Number</title>
    <link href="http://yoursite.com/2020/04/28/136-%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97/"/>
    <id>http://yoursite.com/2020/04/28/136-%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97/</id>
    <published>2020-04-28T12:35:29.000Z</published>
    <updated>2020-06-22T02:44:23.592Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个<strong>非空</strong>整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入: [2,2,1]</span><br><span class="line">输出: 1</span><br><span class="line"></span><br><span class="line">输入: [4,1,2,1,2]</span><br><span class="line">输出: 4</span><br></pre></td></tr></table></figure><h4 id="官方最优解"><a href="#官方最优解" class="headerlink" title="官方最优解"></a>官方最优解</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">singleNumber</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        a = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">            a ^= i</span><br><span class="line">            <span class="comment">#a = a^i</span></span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line"><span class="comment">#时间复杂度：O(n)</span></span><br><span class="line"><span class="comment">#空间复杂度：O(1)</span></span><br></pre></td></tr></table></figure><p><strong>位操作</strong>：a<em>⊕0=</em>a<em>；</em>a<em>⊕</em>a=0</p><h4 id="最快用例"><a href="#最快用例" class="headerlink" title="最快用例"></a>最快用例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">singleNumber</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> nums:</span><br><span class="line">            res ^= n</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;给定一个&lt;strong&gt;非空&lt;/strong&gt;整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/categories/LeetCode/"/>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Task5_模型融合</title>
    <link href="http://yoursite.com/2020/04/04/Task5-%E6%A8%A1%E5%9E%8B%E8%9E%8D%E5%90%88/"/>
    <id>http://yoursite.com/2020/04/04/Task5-%E6%A8%A1%E5%9E%8B%E8%9E%8D%E5%90%88/</id>
    <published>2020-04-04T11:54:07.000Z</published>
    <updated>2020-04-04T12:27:32.226Z</updated>
    
    <content type="html"><![CDATA[<p><strong>融合类型</strong></p><ol><li><p>简单加权融合:</p><ul><li>回归（分类概率）：算术平均融合（Arithmetic mean），几何平均融合（Geometric mean）；</li><li>分类：投票（Voting)</li><li>综合：排序融合(Rank averaging)，log融合</li></ul></li><li><p>stacking/blending:</p><ul><li>构建多层模型，并利用预测结果再拟合预测。</li></ul></li><li><p>boosting/bagging:</p><ul><li>多树的提升方法</li></ul></li></ol><h3 id="Stacking"><a href="#Stacking" class="headerlink" title="Stacking"></a>Stacking</h3><blockquote><p>用初始训练数据学习出若干个基学习器后，将这几个学习器的预测结果作为新的训练集，来学习一个新的学习器。</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdhzfel639j30w00l2dkf.jpg" alt="image-20200404195716171"></p><p>结合策略：</p><p>​    对于分类问题，我们可以使用投票法来选择输出最多的类。</p><p>​    对于回归问题，我们可以将分类器输出的结果求平均值。</p><p>​    使用另外一个机器学习算法来将个体机器学习器的结果结合在一起，这个方法就是Stacking。</p><p>在stacking方法中，我们把个体学习器叫做初级学习器，用于结合的学习器叫做次级学习器或元学习器（meta-learner），次级学习器用于训练的数据叫做次级训练集。次级训练集是在训练集上用初级学习器得到的。</p><h4 id="Stacking的方法讲解（便于理解的例子）"><a href="#Stacking的方法讲解（便于理解的例子）" class="headerlink" title="Stacking的方法讲解（便于理解的例子）"></a>Stacking的方法讲解（便于理解的例子）</h4><blockquote><p> 假设我们有2个基模型 Model1_1、Model1_2 和 一个次级模型Model2</p></blockquote><p><strong>Step 1.</strong> 基模型 Model1_1</p><p>对训练集train训练，然后用于预测 train 和 test 的标签列，分别是P1，T1</p><ul><li><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdhzjghg89j30h006q3yr.jpg" alt="image-20200404200112072"></li><li><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdhzjnh8v8j30fe0cqdgm.jpg" alt="image-20200404200123787"></li></ul><p><strong>Step 2.</strong> 基模型 Model1_2</p><p>​    对训练集train训练，然后用于预测train和test的标签列，分别是P2，T2</p><p><strong>Step 3.</strong> 分别把P1,P2以及T1,T2合并，得到一个新的训练集和测试集train2,test2.</p><p>​    <img src="https://tva1.sinaimg.cn/large/00831rSTly1gdhzlxxz90j30cg07u0t2.jpg" alt="image-20200404200335862"></p><p><strong>Step 4.</strong> 用 次级模型 Model2 以真实训练集标签为标签训练,以train2为特征进行训练，预测test2,得到最终的测试集预测的标签列 YPre</p><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gdhzmz0gl5j30fq0fwjse.jpg" alt="image-20200404200434954"></p><ul><li><p>如何降低再训练的过拟合性：</p><ul><li>次级模型尽量选择简单的线性模型</li><li>利用K折交叉验证</li></ul></li></ul><h2 id="代码学习"><a href="#代码学习" class="headerlink" title="代码学习"></a>代码学习</h2><h3 id="回归-分类概率-融合"><a href="#回归-分类概率-融合" class="headerlink" title="回归\分类概率-融合"></a>回归\分类概率-融合</h3><h4 id="简单加权平均，结果直接融合"><a href="#简单加权平均，结果直接融合" class="headerlink" title="简单加权平均，结果直接融合"></a>简单加权平均，结果直接融合</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 生成一些简单的样本数据，test_prei 代表第i个模型的预测值</span></span><br><span class="line">test_pre1 = [<span class="number">1.2</span>, <span class="number">3.2</span>, <span class="number">2.1</span>, <span class="number">6.2</span>]</span><br><span class="line">test_pre2 = [<span class="number">0.9</span>, <span class="number">3.1</span>, <span class="number">2.0</span>, <span class="number">5.9</span>]</span><br><span class="line">test_pre3 = [<span class="number">1.1</span>, <span class="number">2.9</span>, <span class="number">2.2</span>, <span class="number">6.0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># y_test_true 代表第模型的真实值</span></span><br><span class="line">y_test_true = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>] </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment">## 定义结果的加权平均函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Weighted_method</span><span class="params">(test_pre1,test_pre2,test_pre3,w=[<span class="number">1</span>/<span class="number">3</span>,<span class="number">1</span>/<span class="number">3</span>,<span class="number">1</span>/<span class="number">3</span>])</span>:</span></span><br><span class="line">    Weighted_result = w[<span class="number">0</span>]*pd.Series(test_pre1)+w[<span class="number">1</span>]*pd.Series(test_pre2)+w[<span class="number">2</span>]*pd.Series(test_pre3)</span><br><span class="line">    <span class="keyword">return</span> Weighted_result</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> metrics</span><br><span class="line"><span class="comment"># 各模型的预测结果计算MAE</span></span><br><span class="line">print(<span class="string">'Pred1 MAE:'</span>,metrics.mean_absolute_error(y_test_true, test_pre1))</span><br><span class="line">print(<span class="string">'Pred2 MAE:'</span>,metrics.mean_absolute_error(y_test_true, test_pre2))</span><br><span class="line">print(<span class="string">'Pred3 MAE:'</span>,metrics.mean_absolute_error(y_test_true, test_pre3))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 根据加权计算MAE</span></span><br><span class="line">w = [<span class="number">0.3</span>,<span class="number">0.4</span>,<span class="number">0.3</span>] <span class="comment"># 定义比重权值</span></span><br><span class="line">Weighted_pre = Weighted_method(test_pre1,test_pre2,test_pre3,w)</span><br><span class="line">print(<span class="string">'Weighted_pre MAE:'</span>,metrics.mean_absolute_error(y_test_true, Weighted_pre))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 定义结果的加权平均函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Mean_method</span><span class="params">(test_pre1,test_pre2,test_pre3)</span>:</span></span><br><span class="line">    Mean_result = pd.concat([pd.Series(test_pre1),pd.Series(test_pre2),pd.Series(test_pre3)],axis=<span class="number">1</span>).mean(axis=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> Mean_result</span><br><span class="line"></span><br><span class="line">Mean_pre = Mean_method(test_pre1,test_pre2,test_pre3)</span><br><span class="line">print(<span class="string">'Mean_pre MAE:'</span>,metrics.mean_absolute_error(y_test_true, Mean_pre))  </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment">## 定义结果的加权平均函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Median_method</span><span class="params">(test_pre1,test_pre2,test_pre3)</span>:</span></span><br><span class="line">    Median_result = pd.concat([pd.Series(test_pre1),pd.Series(test_pre2),pd.Series(test_pre3)],axis=<span class="number">1</span>).median(axis=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> Median_result</span><br><span class="line"></span><br><span class="line">Median_pre = Median_method(test_pre1,test_pre2,test_pre3)</span><br><span class="line">print(<span class="string">'Median_pre MAE:'</span>,metrics.mean_absolute_error(y_test_true, Median_pre))</span><br></pre></td></tr></table></figure><h4 id="Stacking融合-回归"><a href="#Stacking融合-回归" class="headerlink" title="Stacking融合(回归)"></a>Stacking融合(回归)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> linear_model</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Stacking_method</span><span class="params">(train_reg1,train_reg2,train_reg3,y_train_true,test_pre1,test_pre2,test_pre3,model_L2= linear_model.LinearRegression<span class="params">()</span>)</span>:</span></span><br><span class="line">    model_L2.fit(pd.concat([pd.Series(train_reg1),pd.Series(train_reg2),pd.Series(train_reg3)],axis=<span class="number">1</span>).values,y_train_true)</span><br><span class="line">    Stacking_result = model_L2.predict(pd.concat([pd.Series(test_pre1),pd.Series(test_pre2),pd.Series(test_pre3)],axis=<span class="number">1</span>).values)</span><br><span class="line">    <span class="keyword">return</span> Stacking_result</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">## 生成一些简单的样本数据，test_prei 代表第i个模型的预测值</span></span><br><span class="line">train_reg1 = [<span class="number">3.2</span>, <span class="number">8.2</span>, <span class="number">9.1</span>, <span class="number">5.2</span>]</span><br><span class="line">train_reg2 = [<span class="number">2.9</span>, <span class="number">8.1</span>, <span class="number">9.0</span>, <span class="number">4.9</span>]</span><br><span class="line">train_reg3 = [<span class="number">3.1</span>, <span class="number">7.9</span>, <span class="number">9.2</span>, <span class="number">5.0</span>]</span><br><span class="line"><span class="comment"># y_test_true 代表第模型的真实值</span></span><br><span class="line">y_train_true = [<span class="number">3</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">5</span>] </span><br><span class="line"></span><br><span class="line">test_pre1 = [<span class="number">1.2</span>, <span class="number">3.2</span>, <span class="number">2.1</span>, <span class="number">6.2</span>]</span><br><span class="line">test_pre2 = [<span class="number">0.9</span>, <span class="number">3.1</span>, <span class="number">2.0</span>, <span class="number">5.9</span>]</span><br><span class="line">test_pre3 = [<span class="number">1.1</span>, <span class="number">2.9</span>, <span class="number">2.2</span>, <span class="number">6.0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># y_test_true 代表第模型的真实值</span></span><br><span class="line">y_test_true = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>] </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">model_L2= linear_model.LinearRegression()</span><br><span class="line">Stacking_pre = Stacking_method(train_reg1,train_reg2,train_reg3,y_train_true,</span><br><span class="line">                               test_pre1,test_pre2,test_pre3,model_L2)</span><br><span class="line">print(<span class="string">'Stacking_pre MAE:'</span>,metrics.mean_absolute_error(y_test_true, Stacking_pre))</span><br></pre></td></tr></table></figure><h3 id="分类模型融合"><a href="#分类模型融合" class="headerlink" title="分类模型融合"></a>分类模型融合</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> make_blobs</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> VotingClassifier</span><br><span class="line"><span class="keyword">from</span> xgboost <span class="keyword">import</span> XGBClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> make_moons</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score,roc_auc_score</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> cross_val_score</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> StratifiedKFold</span><br></pre></td></tr></table></figure><h4 id="Voting投票机制"><a href="#Voting投票机制" class="headerlink" title="Voting投票机制"></a>Voting投票机制</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">硬投票：对多个模型直接进行投票，不区分模型结果的相对重要度，最终投票数最多的类为最终被预测的类。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">iris = datasets.load_iris()</span><br><span class="line"></span><br><span class="line">x=iris.data</span><br><span class="line">y=iris.target</span><br><span class="line">x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line">clf1 = XGBClassifier(learning_rate=<span class="number">0.1</span>, n_estimators=<span class="number">150</span>, max_depth=<span class="number">3</span>, min_child_weight=<span class="number">2</span>, subsample=<span class="number">0.7</span>,</span><br><span class="line">                     colsample_bytree=<span class="number">0.6</span>, objective=<span class="string">'binary:logistic'</span>)</span><br><span class="line">clf2 = RandomForestClassifier(n_estimators=<span class="number">50</span>, max_depth=<span class="number">1</span>, min_samples_split=<span class="number">4</span>,</span><br><span class="line">                              min_samples_leaf=<span class="number">63</span>,oob_score=<span class="literal">True</span>)</span><br><span class="line">clf3 = SVC(C=<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 硬投票</span></span><br><span class="line">eclf = VotingClassifier(estimators=[(<span class="string">'xgb'</span>, clf1), (<span class="string">'rf'</span>, clf2), (<span class="string">'svc'</span>, clf3)], voting=<span class="string">'hard'</span>)</span><br><span class="line"><span class="keyword">for</span> clf, label <span class="keyword">in</span> zip([clf1, clf2, clf3, eclf], [<span class="string">'XGBBoosting'</span>, <span class="string">'Random Forest'</span>, <span class="string">'SVM'</span>, <span class="string">'Ensemble'</span>]):</span><br><span class="line">    scores = cross_val_score(clf, x, y, cv=<span class="number">5</span>, scoring=<span class="string">'accuracy'</span>)</span><br><span class="line">    print(<span class="string">"Accuracy: %0.2f (+/- %0.2f) [%s]"</span> % (scores.mean(), scores.std(), label))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">软投票：和硬投票原理相同，增加了设置权重的功能，可以为不同模型设置不同权重，进而区别模型不同的重要度。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">x=iris.data</span><br><span class="line">y=iris.target</span><br><span class="line">x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line">clf1 = XGBClassifier(learning_rate=<span class="number">0.1</span>, n_estimators=<span class="number">150</span>, max_depth=<span class="number">3</span>, min_child_weight=<span class="number">2</span>, subsample=<span class="number">0.8</span>,</span><br><span class="line">                     colsample_bytree=<span class="number">0.8</span>, objective=<span class="string">'binary:logistic'</span>)</span><br><span class="line">clf2 = RandomForestClassifier(n_estimators=<span class="number">50</span>, max_depth=<span class="number">1</span>, min_samples_split=<span class="number">4</span>,</span><br><span class="line">                              min_samples_leaf=<span class="number">63</span>,oob_score=<span class="literal">True</span>)</span><br><span class="line">clf3 = SVC(C=<span class="number">0.1</span>, probability=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 软投票</span></span><br><span class="line">eclf = VotingClassifier(estimators=[(<span class="string">'xgb'</span>, clf1), (<span class="string">'rf'</span>, clf2), (<span class="string">'svc'</span>, clf3)], voting=<span class="string">'soft'</span>, weights=[<span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>])</span><br><span class="line">clf1.fit(x_train, y_train)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> clf, label <span class="keyword">in</span> zip([clf1, clf2, clf3, eclf], [<span class="string">'XGBBoosting'</span>, <span class="string">'Random Forest'</span>, <span class="string">'SVM'</span>, <span class="string">'Ensemble'</span>]):</span><br><span class="line">    scores = cross_val_score(clf, x, y, cv=<span class="number">5</span>, scoring=<span class="string">'accuracy'</span>)</span><br><span class="line">    print(<span class="string">"Accuracy: %0.2f (+/- %0.2f) [%s]"</span> % (scores.mean(), scores.std(), label))</span><br></pre></td></tr></table></figure><h4 id="分类的Stacking-Blending融合"><a href="#分类的Stacking-Blending融合" class="headerlink" title="分类的Stacking\Blending融合"></a>分类的Stacking\Blending融合</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">5-Fold Stacking</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> ExtraTreesClassifier,GradientBoostingClassifier</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="comment">#创建训练的数据集</span></span><br><span class="line">data_0 = iris.data</span><br><span class="line">data = data_0[:<span class="number">100</span>,:]</span><br><span class="line"></span><br><span class="line">target_0 = iris.target</span><br><span class="line">target = target_0[:<span class="number">100</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#模型融合中使用到的各个单模型</span></span><br><span class="line">clfs = [LogisticRegression(solver=<span class="string">'lbfgs'</span>),</span><br><span class="line">        RandomForestClassifier(n_estimators=<span class="number">5</span>, n_jobs=<span class="number">-1</span>, criterion=<span class="string">'gini'</span>),</span><br><span class="line">        ExtraTreesClassifier(n_estimators=<span class="number">5</span>, n_jobs=<span class="number">-1</span>, criterion=<span class="string">'gini'</span>),</span><br><span class="line">        ExtraTreesClassifier(n_estimators=<span class="number">5</span>, n_jobs=<span class="number">-1</span>, criterion=<span class="string">'entropy'</span>),</span><br><span class="line">        GradientBoostingClassifier(learning_rate=<span class="number">0.05</span>, subsample=<span class="number">0.5</span>, max_depth=<span class="number">6</span>, n_estimators=<span class="number">5</span>)]</span><br><span class="line"> </span><br><span class="line"><span class="comment">#切分一部分数据作为测试集</span></span><br><span class="line">X, X_predict, y, y_predict = train_test_split(data, target, test_size=<span class="number">0.3</span>, random_state=<span class="number">2020</span>)</span><br><span class="line"></span><br><span class="line">dataset_blend_train = np.zeros((X.shape[<span class="number">0</span>], len(clfs)))</span><br><span class="line">dataset_blend_test = np.zeros((X_predict.shape[<span class="number">0</span>], len(clfs)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#5折stacking</span></span><br><span class="line">n_splits = <span class="number">5</span></span><br><span class="line">skf = StratifiedKFold(n_splits)</span><br><span class="line">skf = skf.split(X, y)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j, clf <span class="keyword">in</span> enumerate(clfs):</span><br><span class="line">    <span class="comment">#依次训练各个单模型</span></span><br><span class="line">    dataset_blend_test_j = np.zeros((X_predict.shape[<span class="number">0</span>], <span class="number">5</span>))</span><br><span class="line">    <span class="keyword">for</span> i, (train, test) <span class="keyword">in</span> enumerate(skf):</span><br><span class="line">        <span class="comment">#5-Fold交叉训练，使用第i个部分作为预测，剩余的部分来训练模型，获得其预测的输出作为第i部分的新特征。</span></span><br><span class="line">        X_train, y_train, X_test, y_test = X[train], y[train], X[test], y[test]</span><br><span class="line">        clf.fit(X_train, y_train)</span><br><span class="line">        y_submission = clf.predict_proba(X_test)[:, <span class="number">1</span>]</span><br><span class="line">        dataset_blend_train[test, j] = y_submission</span><br><span class="line">        dataset_blend_test_j[:, i] = clf.predict_proba(X_predict)[:, <span class="number">1</span>]</span><br><span class="line">    <span class="comment">#对于测试集，直接用这k个模型的预测值均值作为新的特征。</span></span><br><span class="line">    dataset_blend_test[:, j] = dataset_blend_test_j.mean(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">"val auc Score: %f"</span> % roc_auc_score(y_predict, dataset_blend_test[:, j]))</span><br><span class="line"></span><br><span class="line">clf = LogisticRegression(solver=<span class="string">'lbfgs'</span>)</span><br><span class="line">clf.fit(dataset_blend_train, y)</span><br><span class="line">y_submission = clf.predict_proba(dataset_blend_test)[:, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">print(<span class="string">"Val auc Score of Stacking: %f"</span> % (roc_auc_score(y_predict, y_submission)))</span><br></pre></td></tr></table></figure><p><strong>Blending</strong></p><ul><li>把原始的训练集先分成两部分,例如 7\3</li><li>在第一层，我们在这70%的数据上训练多个模型，然后去预测那30%数据的label，同时也预测test集的label。</li><li>在第二层，我们就直接用这30%数据在第一层预测的结果做为新特征继续训练，然后用test集第一层预测的label做特征，用第二层训练的模型做进一步预测</li></ul><p>优点:</p><p>​    简单；避开了信息泄露问题：generlizers和stacker使用了不一样的数据集。</p><p>缺点：</p><p>​    使用了很少的数据；可能会过拟合；stacking使用多次的交叉验证会比较稳健</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Blending</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#创建训练的数据集</span></span><br><span class="line"><span class="comment">#创建训练的数据集</span></span><br><span class="line">data_0 = iris.data</span><br><span class="line">data = data_0[:<span class="number">100</span>,:]</span><br><span class="line"></span><br><span class="line">target_0 = iris.target</span><br><span class="line">target = target_0[:<span class="number">100</span>]</span><br><span class="line"> </span><br><span class="line"><span class="comment">#模型融合中使用到的各个单模型</span></span><br><span class="line">clfs = [LogisticRegression(solver=<span class="string">'lbfgs'</span>),</span><br><span class="line">        RandomForestClassifier(n_estimators=<span class="number">5</span>, n_jobs=<span class="number">-1</span>, criterion=<span class="string">'gini'</span>),</span><br><span class="line">        RandomForestClassifier(n_estimators=<span class="number">5</span>, n_jobs=<span class="number">-1</span>, criterion=<span class="string">'entropy'</span>),</span><br><span class="line">        ExtraTreesClassifier(n_estimators=<span class="number">5</span>, n_jobs=<span class="number">-1</span>, criterion=<span class="string">'gini'</span>),</span><br><span class="line">        <span class="comment">#ExtraTreesClassifier(n_estimators=5, n_jobs=-1, criterion='entropy'),</span></span><br><span class="line">        GradientBoostingClassifier(learning_rate=<span class="number">0.05</span>, subsample=<span class="number">0.5</span>, max_depth=<span class="number">6</span>, n_estimators=<span class="number">5</span>)]</span><br><span class="line"> </span><br><span class="line"><span class="comment">#切分一部分数据作为测试集</span></span><br><span class="line">X, X_predict, y, y_predict = train_test_split(data, target, test_size=<span class="number">0.3</span>, random_state=<span class="number">2020</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#切分训练数据集为d1,d2两部分</span></span><br><span class="line">X_d1, X_d2, y_d1, y_d2 = train_test_split(X, y, test_size=<span class="number">0.5</span>, random_state=<span class="number">2020</span>)</span><br><span class="line">dataset_d1 = np.zeros((X_d2.shape[<span class="number">0</span>], len(clfs)))</span><br><span class="line">dataset_d2 = np.zeros((X_predict.shape[<span class="number">0</span>], len(clfs)))</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> j, clf <span class="keyword">in</span> enumerate(clfs):</span><br><span class="line">    <span class="comment">#依次训练各个单模型</span></span><br><span class="line">    clf.fit(X_d1, y_d1)</span><br><span class="line">    y_submission = clf.predict_proba(X_d2)[:, <span class="number">1</span>]</span><br><span class="line">    dataset_d1[:, j] = y_submission</span><br><span class="line">    <span class="comment">#对于测试集，直接用这k个模型的预测值作为新的特征。</span></span><br><span class="line">    dataset_d2[:, j] = clf.predict_proba(X_predict)[:, <span class="number">1</span>]</span><br><span class="line">    print(<span class="string">"val auc Score: %f"</span> % roc_auc_score(y_predict, dataset_d2[:, j]))</span><br><span class="line"></span><br><span class="line"><span class="comment">#融合使用的模型</span></span><br><span class="line">clf = GradientBoostingClassifier(learning_rate=<span class="number">0.02</span>, subsample=<span class="number">0.5</span>, max_depth=<span class="number">6</span>, n_estimators=<span class="number">30</span>)</span><br><span class="line">clf.fit(dataset_d1, y_d2)</span><br><span class="line">y_submission = clf.predict_proba(dataset_d2)[:, <span class="number">1</span>]</span><br><span class="line">print(<span class="string">"Val auc Score of Blending: %f"</span> % (roc_auc_score(y_predict, y_submission)))</span><br></pre></td></tr></table></figure><h4 id="分类的Stacking融合-利用mlxtend"><a href="#分类的Stacking融合-利用mlxtend" class="headerlink" title="分类的Stacking融合(利用mlxtend)"></a>分类的Stacking融合(利用mlxtend)</h4><p>基模型 用 ‘KNN’, ‘Random Forest’, ‘Naive Bayes’ 然后再这基础上 次级模型加一个 ‘LogisticRegression’，模型测试效果有着很好的提升。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">!pip install mlxtend</span><br><span class="line"></span><br><span class="line">import warnings</span><br><span class="line">warnings.filterwarnings(&#39;ignore&#39;)</span><br><span class="line">import itertools</span><br><span class="line">import numpy as np</span><br><span class="line">import seaborn as sns</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import matplotlib.gridspec as gridspec</span><br><span class="line"></span><br><span class="line">from sklearn import datasets</span><br><span class="line">from sklearn.linear_model import LogisticRegression</span><br><span class="line">from sklearn.neighbors import KNeighborsClassifier</span><br><span class="line">from sklearn.naive_bayes import GaussianNB </span><br><span class="line">from sklearn.ensemble import RandomForestClassifier</span><br><span class="line">from mlxtend.classifier import StackingClassifier</span><br><span class="line"></span><br><span class="line">from sklearn.model_selection import cross_val_score</span><br><span class="line">from mlxtend.plotting import plot_learning_curves</span><br><span class="line">from mlxtend.plotting import plot_decision_regions</span><br><span class="line"></span><br><span class="line"># 以python自带的鸢尾花数据集为例</span><br><span class="line">iris &#x3D; datasets.load_iris()</span><br><span class="line">X, y &#x3D; iris.data[:, 1:3], iris.target</span><br><span class="line"></span><br><span class="line">clf1 &#x3D; KNeighborsClassifier(n_neighbors&#x3D;1)</span><br><span class="line">clf2 &#x3D; RandomForestClassifier(random_state&#x3D;1)</span><br><span class="line">clf3 &#x3D; GaussianNB()</span><br><span class="line">lr &#x3D; LogisticRegression()</span><br><span class="line">sclf &#x3D; StackingClassifier(classifiers&#x3D;[clf1, clf2, clf3], </span><br><span class="line">                          meta_classifier&#x3D;lr)</span><br><span class="line"></span><br><span class="line">label &#x3D; [&#39;KNN&#39;, &#39;Random Forest&#39;, &#39;Naive Bayes&#39;, &#39;Stacking Classifier&#39;]</span><br><span class="line">clf_list &#x3D; [clf1, clf2, clf3, sclf]</span><br><span class="line"></span><br><span class="line">fig &#x3D; plt.figure(figsize&#x3D;(10,8))</span><br><span class="line">gs &#x3D; gridspec.GridSpec(2, 2)</span><br><span class="line">grid &#x3D; itertools.product([0,1],repeat&#x3D;2)</span><br><span class="line"></span><br><span class="line">clf_cv_mean &#x3D; []</span><br><span class="line">clf_cv_std &#x3D; []</span><br><span class="line">for clf, label, grd in zip(clf_list, label, grid):</span><br><span class="line">        </span><br><span class="line">    scores &#x3D; cross_val_score(clf, X, y, cv&#x3D;3, scoring&#x3D;&#39;accuracy&#39;)</span><br><span class="line">    print(&quot;Accuracy: %.2f (+&#x2F;- %.2f) [%s]&quot; %(scores.mean(), scores.std(), label))</span><br><span class="line">    clf_cv_mean.append(scores.mean())</span><br><span class="line">    clf_cv_std.append(scores.std())</span><br><span class="line">        </span><br><span class="line">    clf.fit(X, y)</span><br><span class="line">    ax &#x3D; plt.subplot(gs[grd[0], grd[1]])</span><br><span class="line">    fig &#x3D; plot_decision_regions(X&#x3D;X, y&#x3D;y, clf&#x3D;clf)</span><br><span class="line">    plt.title(label)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h3 id="其它方法："><a href="#其它方法：" class="headerlink" title="其它方法："></a>其它方法：</h3><p> 将特征放进模型中预测，并将预测结果变换并作为新的特征加入原有特征中再经过模型预测结果 （Stacking变化）</p><p>可以反复预测多次将结果加入最后的特征中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Ensemble_add_feature</span><span class="params">(train,test,target,clfs)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># n_flods = 5</span></span><br><span class="line">    <span class="comment"># skf = list(StratifiedKFold(y, n_folds=n_flods))</span></span><br><span class="line"></span><br><span class="line">    train_ = np.zeros((train.shape[<span class="number">0</span>],len(clfs*<span class="number">2</span>)))</span><br><span class="line">    test_ = np.zeros((test.shape[<span class="number">0</span>],len(clfs*<span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> j,clf <span class="keyword">in</span> enumerate(clfs):</span><br><span class="line">        <span class="string">'''依次训练各个单模型'''</span></span><br><span class="line">        <span class="comment"># print(j, clf)</span></span><br><span class="line">        <span class="string">'''使用第1个部分作为预测，第2部分来训练模型，获得其预测的输出作为第2部分的新特征。'''</span></span><br><span class="line">        <span class="comment"># X_train, y_train, X_test, y_test = X[train], y[train], X[test], y[test]</span></span><br><span class="line"></span><br><span class="line">        clf.fit(train,target)</span><br><span class="line">        y_train = clf.predict(train)</span><br><span class="line">        y_test = clf.predict(test)</span><br><span class="line"></span><br><span class="line">        <span class="comment">## 新特征生成</span></span><br><span class="line">        train_[:,j*<span class="number">2</span>] = y_train**<span class="number">2</span></span><br><span class="line">        test_[:,j*<span class="number">2</span>] = y_test**<span class="number">2</span></span><br><span class="line">        train_[:, j+<span class="number">1</span>] = np.exp(y_train)</span><br><span class="line">        test_[:, j+<span class="number">1</span>] = np.exp(y_test)</span><br><span class="line">        <span class="comment"># print("val auc Score: %f" % r2_score(y_predict, dataset_d2[:, j]))</span></span><br><span class="line">        print(<span class="string">'Method '</span>,j)</span><br><span class="line">    </span><br><span class="line">    train_ = pd.DataFrame(train_)</span><br><span class="line">    test_ = pd.DataFrame(test_)</span><br><span class="line">    <span class="keyword">return</span> train_,test_</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> cross_val_score, train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line">clf = LogisticRegression()</span><br><span class="line"></span><br><span class="line">data_0 = iris.data</span><br><span class="line">data = data_0[:<span class="number">100</span>,:]</span><br><span class="line"></span><br><span class="line">target_0 = iris.target</span><br><span class="line">target = target_0[:<span class="number">100</span>]</span><br><span class="line"></span><br><span class="line">x_train,x_test,y_train,y_test=train_test_split(data,target,test_size=<span class="number">0.3</span>)</span><br><span class="line">x_train = pd.DataFrame(x_train) ; x_test = pd.DataFrame(x_test)</span><br><span class="line"></span><br><span class="line"><span class="comment">#模型融合中使用到的各个单模型</span></span><br><span class="line">clfs = [LogisticRegression(),</span><br><span class="line">        RandomForestClassifier(n_estimators=<span class="number">5</span>, n_jobs=<span class="number">-1</span>, criterion=<span class="string">'gini'</span>),</span><br><span class="line">        ExtraTreesClassifier(n_estimators=<span class="number">5</span>, n_jobs=<span class="number">-1</span>, criterion=<span class="string">'gini'</span>),</span><br><span class="line">        ExtraTreesClassifier(n_estimators=<span class="number">5</span>, n_jobs=<span class="number">-1</span>, criterion=<span class="string">'entropy'</span>),</span><br><span class="line">        GradientBoostingClassifier(learning_rate=<span class="number">0.05</span>, subsample=<span class="number">0.5</span>, max_depth=<span class="number">6</span>, n_estimators=<span class="number">5</span>)]</span><br><span class="line"></span><br><span class="line">New_train,New_test = Ensemble_add_feature(x_train,x_test,y_train,clfs)</span><br><span class="line"></span><br><span class="line">clf = LogisticRegression()</span><br><span class="line"><span class="comment"># clf = GradientBoostingClassifier(learning_rate=0.02, subsample=0.5, max_depth=6, n_estimators=30)</span></span><br><span class="line">clf.fit(New_train, y_train)</span><br><span class="line">y_emb = clf.predict_proba(New_test)[:, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">print(<span class="string">"Val auc Score of stacking: %f"</span> % (roc_auc_score(y_test, y_emb)))</span><br></pre></td></tr></table></figure><h2 id="本赛题示例"><a href="#本赛题示例" class="headerlink" title="本赛题示例"></a>本赛题示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line">import warnings</span><br><span class="line">import matplotlib</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import seaborn as sns</span><br><span class="line"></span><br><span class="line">warnings.filterwarnings(&#39;ignore&#39;)</span><br><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line">import itertools</span><br><span class="line">import matplotlib.gridspec as gridspec</span><br><span class="line">from sklearn import datasets</span><br><span class="line">from sklearn.linear_model import LogisticRegression</span><br><span class="line">from sklearn.neighbors import KNeighborsClassifier</span><br><span class="line">from sklearn.naive_bayes import GaussianNB </span><br><span class="line">from sklearn.ensemble import RandomForestClassifier</span><br><span class="line"># from mlxtend.classifier import StackingClassifier</span><br><span class="line">from sklearn.model_selection import cross_val_score, train_test_split</span><br><span class="line"># from mlxtend.plotting import plot_learning_curves</span><br><span class="line"># from mlxtend.plotting import plot_decision_regions</span><br><span class="line"></span><br><span class="line">from sklearn.model_selection import StratifiedKFold</span><br><span class="line">from sklearn.model_selection import train_test_split</span><br><span class="line"></span><br><span class="line">from sklearn import linear_model</span><br><span class="line">from sklearn import preprocessing</span><br><span class="line">from sklearn.svm import SVR</span><br><span class="line">from sklearn.decomposition import PCA,FastICA,FactorAnalysis,SparsePCA</span><br><span class="line"></span><br><span class="line">import lightgbm as lgb</span><br><span class="line">import xgboost as xgb</span><br><span class="line">from sklearn.model_selection import GridSearchCV,cross_val_score</span><br><span class="line">from sklearn.ensemble import RandomForestRegressor,GradientBoostingRegressor</span><br><span class="line"></span><br><span class="line">from sklearn.metrics import mean_squared_error, mean_absolute_error</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 数据读取</span><br><span class="line">Train_data &#x3D; pd.read_csv(&#39;datalab&#x2F;231784&#x2F;used_car_train_20200313.csv&#39;, sep&#x3D;&#39; &#39;)</span><br><span class="line">TestA_data &#x3D; pd.read_csv(&#39;datalab&#x2F;231784&#x2F;used_car_testA_20200313.csv&#39;, sep&#x3D;&#39; &#39;)</span><br><span class="line"></span><br><span class="line">print(Train_data.shape)</span><br><span class="line">print(TestA_data.shape)</span><br><span class="line"></span><br><span class="line">Train_data.head()</span><br><span class="line"></span><br><span class="line">numerical_cols &#x3D; Train_data.select_dtypes(exclude &#x3D; &#39;object&#39;).columns</span><br><span class="line">print(numerical_cols)</span><br><span class="line"></span><br><span class="line">feature_cols &#x3D; [col for col in numerical_cols if col not in [&#39;SaleID&#39;,&#39;name&#39;,&#39;regDate&#39;,&#39;price&#39;]]</span><br><span class="line"></span><br><span class="line">X_data &#x3D; Train_data[feature_cols]</span><br><span class="line">Y_data &#x3D; Train_data[&#39;price&#39;]</span><br><span class="line"></span><br><span class="line">X_test  &#x3D; TestA_data[feature_cols]</span><br><span class="line"></span><br><span class="line">print(&#39;X train shape:&#39;,X_data.shape)</span><br><span class="line">print(&#39;X test shape:&#39;,X_test.shape)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def Sta_inf(data):</span><br><span class="line">    print(&#39;_min&#39;,np.min(data))</span><br><span class="line">    print(&#39;_max:&#39;,np.max(data))</span><br><span class="line">    print(&#39;_mean&#39;,np.mean(data))</span><br><span class="line">    print(&#39;_ptp&#39;,np.ptp(data))</span><br><span class="line">    print(&#39;_std&#39;,np.std(data))</span><br><span class="line">    print(&#39;_var&#39;,np.var(data))</span><br><span class="line">    </span><br><span class="line">print(&#39;Sta of label:&#39;)</span><br><span class="line">Sta_inf(Y_data)    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">X_data &#x3D; X_data.fillna(-1)</span><br><span class="line">X_test &#x3D; X_test.fillna(-1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def build_model_lr(x_train,y_train):</span><br><span class="line">    reg_model &#x3D; linear_model.LinearRegression()</span><br><span class="line">    reg_model.fit(x_train,y_train)</span><br><span class="line">    return reg_model</span><br><span class="line"></span><br><span class="line">def build_model_ridge(x_train,y_train):</span><br><span class="line">    reg_model &#x3D; linear_model.Ridge(alpha&#x3D;0.8)#alphas&#x3D;range(1,100,5)</span><br><span class="line">    reg_model.fit(x_train,y_train)</span><br><span class="line">    return reg_model</span><br><span class="line"></span><br><span class="line">def build_model_lasso(x_train,y_train):</span><br><span class="line">    reg_model &#x3D; linear_model.LassoCV()</span><br><span class="line">    reg_model.fit(x_train,y_train)</span><br><span class="line">    return reg_model</span><br><span class="line"></span><br><span class="line">def build_model_gbdt(x_train,y_train):</span><br><span class="line">    estimator &#x3D;GradientBoostingRegressor(loss&#x3D;&#39;ls&#39;,subsample&#x3D; 0.85,max_depth&#x3D; 5,n_estimators &#x3D; 100)</span><br><span class="line">    param_grid &#x3D; &#123; </span><br><span class="line">            &#39;learning_rate&#39;: [0.05,0.08,0.1,0.2],</span><br><span class="line">            &#125;</span><br><span class="line">    gbdt &#x3D; GridSearchCV(estimator, param_grid,cv&#x3D;3)</span><br><span class="line">    gbdt.fit(x_train,y_train)</span><br><span class="line">    print(gbdt.best_params_)</span><br><span class="line">    # print(gbdt.best_estimator_ )</span><br><span class="line">    return gbdt</span><br><span class="line"></span><br><span class="line">def build_model_xgb(x_train,y_train):</span><br><span class="line">    model &#x3D; xgb.XGBRegressor(n_estimators&#x3D;120, learning_rate&#x3D;0.08, gamma&#x3D;0, subsample&#x3D;0.8,\</span><br><span class="line">        colsample_bytree&#x3D;0.9, max_depth&#x3D;5) #, objective &#x3D;&#39;reg:squarederror&#39;</span><br><span class="line">    model.fit(x_train, y_train)</span><br><span class="line">    return model</span><br><span class="line"></span><br><span class="line">def build_model_lgb(x_train,y_train):</span><br><span class="line">    estimator &#x3D; lgb.LGBMRegressor(num_leaves&#x3D;63,n_estimators &#x3D; 100)</span><br><span class="line">    param_grid &#x3D; &#123;</span><br><span class="line">        &#39;learning_rate&#39;: [0.01, 0.05, 0.1],</span><br><span class="line">    &#125;</span><br><span class="line">    gbm &#x3D; GridSearchCV(estimator, param_grid)</span><br><span class="line">    gbm.fit(x_train, y_train)</span><br><span class="line">    return gbm</span><br></pre></td></tr></table></figure><h3 id="XGBoost的五折交叉回归验证实现"><a href="#XGBoost的五折交叉回归验证实现" class="headerlink" title="XGBoost的五折交叉回归验证实现"></a>XGBoost的五折交叉回归验证实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">## xgb</span><br><span class="line">xgr &#x3D; xgb.XGBRegressor(n_estimators&#x3D;120, learning_rate&#x3D;0.1, subsample&#x3D;0.8,\</span><br><span class="line">        colsample_bytree&#x3D;0.9, max_depth&#x3D;7) # ,objective &#x3D;&#39;reg:squarederror&#39;</span><br><span class="line"></span><br><span class="line">scores_train &#x3D; []</span><br><span class="line">scores &#x3D; []</span><br><span class="line"></span><br><span class="line">## 5折交叉验证方式</span><br><span class="line">sk&#x3D;StratifiedKFold(n_splits&#x3D;5,shuffle&#x3D;True,random_state&#x3D;0)</span><br><span class="line">for train_ind,val_ind in sk.split(X_data,Y_data):</span><br><span class="line">    </span><br><span class="line">    train_x&#x3D;X_data.iloc[train_ind].values</span><br><span class="line">    train_y&#x3D;Y_data.iloc[train_ind]</span><br><span class="line">    val_x&#x3D;X_data.iloc[val_ind].values</span><br><span class="line">    val_y&#x3D;Y_data.iloc[val_ind]</span><br><span class="line">    </span><br><span class="line">    xgr.fit(train_x,train_y)</span><br><span class="line">    pred_train_xgb&#x3D;xgr.predict(train_x)</span><br><span class="line">    pred_xgb&#x3D;xgr.predict(val_x)</span><br><span class="line">    </span><br><span class="line">    score_train &#x3D; mean_absolute_error(train_y,pred_train_xgb)</span><br><span class="line">    scores_train.append(score_train)</span><br><span class="line">    score &#x3D; mean_absolute_error(val_y,pred_xgb)</span><br><span class="line">    scores.append(score)</span><br><span class="line"></span><br><span class="line">print(&#39;Train mae:&#39;,np.mean(score_train))</span><br><span class="line">print(&#39;Val mae&#39;,np.mean(scores))</span><br></pre></td></tr></table></figure><h4 id="划分数据集，并用多种方法训练和预测"><a href="#划分数据集，并用多种方法训练和预测" class="headerlink" title="划分数据集，并用多种方法训练和预测"></a>划分数据集，并用多种方法训练和预测</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">## Split data with val</span><br><span class="line">x_train,x_val,y_train,y_val &#x3D; train_test_split(X_data,Y_data,test_size&#x3D;0.3)</span><br><span class="line"></span><br><span class="line">## Train and Predict</span><br><span class="line">print(&#39;Predict LR...&#39;)</span><br><span class="line">model_lr &#x3D; build_model_lr(x_train,y_train)</span><br><span class="line">val_lr &#x3D; model_lr.predict(x_val)</span><br><span class="line">subA_lr &#x3D; model_lr.predict(X_test)</span><br><span class="line"></span><br><span class="line">print(&#39;Predict Ridge...&#39;)</span><br><span class="line">model_ridge &#x3D; build_model_ridge(x_train,y_train)</span><br><span class="line">val_ridge &#x3D; model_ridge.predict(x_val)</span><br><span class="line">subA_ridge &#x3D; model_ridge.predict(X_test)</span><br><span class="line"></span><br><span class="line">print(&#39;Predict Lasso...&#39;)</span><br><span class="line">model_lasso &#x3D; build_model_lasso(x_train,y_train)</span><br><span class="line">val_lasso &#x3D; model_lasso.predict(x_val)</span><br><span class="line">subA_lasso &#x3D; model_lasso.predict(X_test)</span><br><span class="line"></span><br><span class="line">print(&#39;Predict GBDT...&#39;)</span><br><span class="line">model_gbdt &#x3D; build_model_gbdt(x_train,y_train)</span><br><span class="line">val_gbdt &#x3D; model_gbdt.predict(x_val)</span><br><span class="line">subA_gbdt &#x3D; model_gbdt.predict(X_test)</span><br></pre></td></tr></table></figure><h3 id="一般比赛中效果最为显著的两种方法"><a href="#一般比赛中效果最为显著的两种方法" class="headerlink" title="一般比赛中效果最为显著的两种方法"></a>一般比赛中效果最为显著的两种方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">print(&#39;predict XGB...&#39;)</span><br><span class="line">model_xgb &#x3D; build_model_xgb(x_train,y_train)</span><br><span class="line">val_xgb &#x3D; model_xgb.predict(x_val)</span><br><span class="line">subA_xgb &#x3D; model_xgb.predict(X_test)</span><br><span class="line"></span><br><span class="line">print(&#39;predict lgb...&#39;)</span><br><span class="line">model_lgb &#x3D; build_model_lgb(x_train,y_train)</span><br><span class="line">val_lgb &#x3D; model_lgb.predict(x_val)</span><br><span class="line">subA_lgb &#x3D; model_lgb.predict(X_test)</span><br><span class="line"></span><br><span class="line">print(&#39;Sta inf of lgb:&#39;)</span><br><span class="line">Sta_inf(subA_lgb)</span><br></pre></td></tr></table></figure><h4 id="加权融合"><a href="#加权融合" class="headerlink" title="加权融合"></a>加权融合</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Weighted_method</span><span class="params">(test_pre1,test_pre2,test_pre3,w=[<span class="number">1</span>/<span class="number">3</span>,<span class="number">1</span>/<span class="number">3</span>,<span class="number">1</span>/<span class="number">3</span>])</span>:</span></span><br><span class="line">    Weighted_result = w[<span class="number">0</span>]*pd.Series(test_pre1)+w[<span class="number">1</span>]*pd.Series(test_pre2)+w[<span class="number">2</span>]*pd.Series(test_pre3)</span><br><span class="line">    <span class="keyword">return</span> Weighted_result</span><br><span class="line"></span><br><span class="line"><span class="comment">## Init the Weight</span></span><br><span class="line">w = [<span class="number">0.3</span>,<span class="number">0.4</span>,<span class="number">0.3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">## 测试验证集准确度</span></span><br><span class="line">val_pre = Weighted_method(val_lgb,val_xgb,val_gbdt,w)</span><br><span class="line">MAE_Weighted = mean_absolute_error(y_val,val_pre)</span><br><span class="line">print(<span class="string">'MAE of Weighted of val:'</span>,MAE_Weighted)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 预测数据部分</span></span><br><span class="line">subA = Weighted_method(subA_lgb,subA_xgb,subA_gbdt,w)</span><br><span class="line">print(<span class="string">'Sta inf:'</span>)</span><br><span class="line">Sta_inf(subA)</span><br><span class="line"><span class="comment">## 生成提交文件</span></span><br><span class="line">sub = pd.DataFrame()</span><br><span class="line">sub[<span class="string">'SaleID'</span>] = X_test.index</span><br><span class="line">sub[<span class="string">'price'</span>] = subA</span><br><span class="line">sub.to_csv(<span class="string">'./sub_Weighted.csv'</span>,index=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 与简单的LR（线性回归）进行对比</span></span><br><span class="line">val_lr_pred = model_lr.predict(x_val)</span><br><span class="line">MAE_lr = mean_absolute_error(y_val,val_lr_pred)</span><br><span class="line">print(<span class="string">'MAE of lr:'</span>,MAE_lr)</span><br></pre></td></tr></table></figure><h4 id="Starking融合"><a href="#Starking融合" class="headerlink" title="Starking融合"></a>Starking融合</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## Starking</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 第一层</span></span><br><span class="line">train_lgb_pred = model_lgb.predict(x_train)</span><br><span class="line">train_xgb_pred = model_xgb.predict(x_train)</span><br><span class="line">train_gbdt_pred = model_gbdt.predict(x_train)</span><br><span class="line"></span><br><span class="line">Strak_X_train = pd.DataFrame()</span><br><span class="line">Strak_X_train[<span class="string">'Method_1'</span>] = train_lgb_pred</span><br><span class="line">Strak_X_train[<span class="string">'Method_2'</span>] = train_xgb_pred</span><br><span class="line">Strak_X_train[<span class="string">'Method_3'</span>] = train_gbdt_pred</span><br><span class="line"></span><br><span class="line">Strak_X_val = pd.DataFrame()</span><br><span class="line">Strak_X_val[<span class="string">'Method_1'</span>] = val_lgb</span><br><span class="line">Strak_X_val[<span class="string">'Method_2'</span>] = val_xgb</span><br><span class="line">Strak_X_val[<span class="string">'Method_3'</span>] = val_gbdt</span><br><span class="line"></span><br><span class="line">Strak_X_test = pd.DataFrame()</span><br><span class="line">Strak_X_test[<span class="string">'Method_1'</span>] = subA_lgb</span><br><span class="line">Strak_X_test[<span class="string">'Method_2'</span>] = subA_xgb</span><br><span class="line">Strak_X_test[<span class="string">'Method_3'</span>] = subA_gbdt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Strak_X_test.head()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## level2-method </span></span><br><span class="line">model_lr_Stacking = build_model_lr(Strak_X_train,y_train)</span><br><span class="line"><span class="comment">## 训练集</span></span><br><span class="line">train_pre_Stacking = model_lr_Stacking.predict(Strak_X_train)</span><br><span class="line">print(<span class="string">'MAE of Stacking-LR:'</span>,mean_absolute_error(y_train,train_pre_Stacking))</span><br><span class="line"></span><br><span class="line"><span class="comment">## 验证集</span></span><br><span class="line">val_pre_Stacking = model_lr_Stacking.predict(Strak_X_val)</span><br><span class="line">print(<span class="string">'MAE of Stacking-LR:'</span>,mean_absolute_error(y_val,val_pre_Stacking))</span><br><span class="line"></span><br><span class="line"><span class="comment">## 预测集</span></span><br><span class="line">print(<span class="string">'Predict Stacking-LR...'</span>)</span><br><span class="line">subA_Stacking = model_lr_Stacking.predict(Strak_X_test)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">subA_Stacking[subA_Stacking&lt;<span class="number">10</span>]=<span class="number">10</span>  <span class="comment">## 去除过小的预测值</span></span><br><span class="line"></span><br><span class="line">sub = pd.DataFrame()</span><br><span class="line">sub[<span class="string">'SaleID'</span>] = TestA_data.SaleID</span><br><span class="line">sub[<span class="string">'price'</span>] = subA_Stacking</span><br><span class="line">sub.to_csv(<span class="string">'./sub_Stacking.csv'</span>,index=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">'Sta inf:'</span>)</span><br><span class="line">Sta_inf(subA_Stacking)</span><br></pre></td></tr></table></figure><h2 id="经验总结"><a href="#经验总结" class="headerlink" title="经验总结"></a>经验总结</h2><p>提分和提升模型鲁棒性的一种重要方法</p><ul><li><strong>结果层面的融合</strong>:</li><li><strong>特征层面的融合(分割)</strong></li><li><strong>模型层面的融合</strong></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;融合类型&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;简单加权融合:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;回归（分类概率）：算术平均融合（Arithmetic mean），几何平均融合（Geometric mean）；&lt;/li&gt;
&lt;li&gt;分类：投票（Voting
      
    
    </summary>
    
    
    
      <category term="数据挖掘" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/"/>
    
  </entry>
  
  <entry>
    <title>Task4_模型调参</title>
    <link href="http://yoursite.com/2020/04/01/Task4-%E6%A8%A1%E5%9E%8B%E8%B0%83%E5%8F%82/"/>
    <id>http://yoursite.com/2020/04/01/Task4-%E6%A8%A1%E5%9E%8B%E8%B0%83%E5%8F%82/</id>
    <published>2020-04-01T03:28:03.000Z</published>
    <updated>2020-04-01T12:36:12.941Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础学习："><a href="#基础学习：" class="headerlink" title="基础学习："></a>基础学习：</h2><h4 id="Liner-Regression"><a href="#Liner-Regression" class="headerlink" title="Liner Regression"></a>Liner Regression</h4><p>$f(x)=w^{\prime} x+b$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#w是列向量 矩阵由一个个列向量构成 y = dot(w_t,X)+b</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">w_t,b = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]),<span class="number">1</span></span><br><span class="line">X = np.array([[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>]]).T</span><br><span class="line">y_hat = np.dot(w,X) + b</span><br></pre></td></tr></table></figure><p>策略：通过<strong>loss</strong>衡量w和b。$loss=(f(x)-y)^{2}$</p><p>优化：</p><ul><li><p><strong>最小二乘</strong>：<img src="https://www.zhihu.com/equation?tex=w&#39;%3DyX^T(XX^T" alt="[公式]">^{-1})</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">w_t = np.dot(np.dot(y,X.T), np.linalg.inv(np.dot(X,X.T)))</span><br></pre></td></tr></table></figure></li><li><p><strong>梯度下降</strong></p><p><img src="https://www.zhihu.com/equation?tex=grad+%3D+2(w&#39;X-y" alt="[公式]">X^T)</p><p><img src="https://www.zhihu.com/equation?tex=w\leftarrow+w%2B0.1*grad" alt="[公式]"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">  grad = <span class="number">2</span> *np.dot((np.dot(w_t,x)-y),x.t)</span><br><span class="line">  w_t -=<span class="number">0.1</span> * grad</span><br><span class="line">  <span class="keyword">if</span> np.linalg.norm(w_t,ord = <span class="number">2</span>)&lt;<span class="number">1e-3</span>:</span><br><span class="line">    <span class="keyword">break</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="梯度提升树GBDT"><a href="#梯度提升树GBDT" class="headerlink" title="梯度提升树GBDT"></a>梯度提升树GBDT</h4><h5 id="CART回归树"><a href="#CART回归树" class="headerlink" title="CART回归树"></a><strong>CART回归树</strong></h5><p>GBDT是一个集成模型，可以看做是很多个基模型的线性相加，其中的基模型就是CART回归树。</p><p>CART树是一个二分决策树模型，每个节点特征取值为“是”和“不是”。</p><ul><li><p><strong>回归树生成</strong>：一个回归树对应的输入空间的一个划分，假设已经将输入空间划分为M个单元R1,R2,R3….Rm，并且每个单元都有固定的输出值cm，其中I为判别函数。</p><p>输入：训练数据集D={(x1,y1),(x2,y2),….,(xn,yn)}</p><p>输出：一颗回归树 $f(x)=\sum_{m=1}^{M} \hat{c}_{m} I\left(x \in R_{m}\right)$</p><p><img src="https://www.zhihu.com/equation?tex=loss%3D%5Csum_%7Bx_i%5Cin+R_m%7D%7B%28y_i+-+f%28x_i%29%29%5E2%7D" alt="[公式]">。</p><p><em>可知</em>：Rm上的最优输出值就是Rm内所有样本xi对应yi的均值。</p><p><u>如何对输入空间进行划分？</u>：选择最优的特征作为划分。如果特征是连续变量，R1 = {x|x^j==s} and R2 = {x|x^j != s}；寻找最优的变量j和最优切分点s：</p><script type="math/tex; mode=display">\min _{j, s}\left[\min _{c_{1}} \sum_{x_{i} \in R_{1}}\left(y_{i}-c_{1}\right)^{2}+\min c_{2} \sum_{x_{i} \in R_{2}}\left(y_{i}-c_{2}\right)^{2}\right]</script></li><li><p><strong>回归树剪枝</strong></p><p>先从整体树T0开始，对内部任意节点t，比较以t作为单节点树的损失与t作为根节点树的损失，如果单节点比下面一棵树还要好，就给剪掉。剪完后的树继续重复此过程。</p><p>loss：$C_{a}(T)=C(T)+\alpha|T|$</p><blockquote><p>C(T)为对训练数据的误差，|T|为树的节点数量，alpha调节的是要精准度还是要模型的简单性。（过拟合与欠拟合）</p></blockquote></li></ul><h4 id="GBDT"><a href="#GBDT" class="headerlink" title="GBDT"></a>GBDT</h4><p>模型定义如下：$f_{t}(x)=\sum_{t=1}^{T} h_{t}(x)$；f­­­t­(x)表示第t轮的模型，ht(x)表示第t颗决策树</p><p>采用前向分步算法：$f_{t}(x)=f_{t-1}(x)+h_{t}(x)$</p><p>Loss：<img src="https://www.zhihu.com/equation?tex=L%28f_t%28x%29%2Cy%29%3DL%28f_%7Bt-1%7D%2Bh_t%28x%29%2Cy%29" alt="[公式]"></p><p>第t轮的第i个样本的损失函数的负梯度表示为：<img src="https://www.zhihu.com/equation?tex=r_%7Bt%2Ci%7D%3D-%5B%5Cfrac%7B%5Cdelta+L%28y%2Cf%28x_i%29%29%7D%7B%5Cdelta+f%28x_i%29%7D%5D" alt="[公式]"></p><p><img src="https://www.zhihu.com/equation?tex=r_%7Bt%2Ci%7D%3D-%5B%5Cfrac%7B%5Cdelta+L%28y%2Cf%28x_i%29%29%7D%7B%5Cdelta+f%28x_i%29%7D%5D%3Dy_i-f_%7Bm-1%7D%28x_i%29" alt="[公式]"></p><p>利用(xi, $r_{ti}$) (i=1,2,…m),我们可以拟合一颗CART回归树，得到了第t颗回归树，其对应的叶节点区域Rtj, j=1,2,…,J。其中J为叶子节点的个数。</p><p>针对每一个叶子节点里的样本，我们求出使损失函数最小，也就是拟合叶子节点最好的的输出值ctj如下(注意这里的yi是真实值，不是残差)：</p><p><img src="https://www.zhihu.com/equation?tex=c_%7Bt%2Cj%7D%3Dargmin%5Csum_%7Bx_i%5Cin+R_%7Bt%2Cj%7D%7D%7BL%28y_i%2Cf_%7Bt-1%7D%28x_i%29%2Bc%29%7D" alt="[公式]"></p><p>此时本轮的决策树拟合函数就得到了：</p><script type="math/tex; mode=display">h_{t}(x)=\sum_{j=1}^{J} c_{t, j} I\left(x \in R_{t, j}\right)</script><p>然后本轮的强学习器也就得到了：</p><script type="math/tex; mode=display">f_{t}(x)=f_{t-1}(x)+\sum_{i=1}^{y} c_{t, j} I\left(x \in R_{t, j}\right)</script><p>之后一直迭代下去，直到损失函数收敛.</p><h3 id="Xgboos"><a href="#Xgboos" class="headerlink" title="Xgboos"></a>Xgboos</h3><p>目标函数：$\mathcal{L}^{(t)}=\sum_{i=1}^{n} l\left(y_{i}, \hat{y}_{i}^{(t-1)}+f_{t}\left(\mathbf{x}_{i}\right)\right)+\Omega\left(f_{t}\right)$</p><ul><li>规整项$\Omega\left(f_{t}\right)$是一个递归的式子，规整项仅仅是第t颗树的，具体起来就是这棵树所有叶子节点权重向量的二范数。</li></ul><p>$\mathcal{L}^{(t)} \simeq \sum_{i=1}^{n}\left[l\left(y_{i}, \hat{y}^{(t-1)}\right)+g_{i} f_{t}\left(\mathbf{x}_{i}\right)+\frac{1}{2} h_{i} f_{t}^{2}\left(\mathbf{x}_{i}\right)\right]+\Omega\left(f_{t}\right)$</p><ul><li><p>泰勒展开，假设残差接近于零。</p></li><li><blockquote><p>麦克劳林：$f(x)=f(0)+\frac{f^{\prime}(0)}{1 !} x+\frac{f^{\prime \prime}(0)}{2 !} x^{2}+\frac{f^{\prime \prime \prime}(0)}{3 !} x^{3}+\dots+\frac{f^{(n)}(0)}{n !} x^{n}+R_{n}(x)$</p></blockquote></li></ul><p>$\begin{aligned} \tilde{\mathcal{L}}^{(t)} &amp;=\sum_{i=1}^{n}\left[g_{i} f_{t}\left(\mathbf{x}_{i}\right)+\frac{1}{2} h_{i} f_{t}^{2}\left(\mathbf{x}_{i}\right)\right]+\gamma T+\frac{1}{2} \lambda \sum_{j=1}^{T} w_{j}^{2} \ &amp;=\sum_{j=1}^{T}\left[\left(\sum_{i \in I_{j}} g_{i}\right) w_{j}+\frac{1}{2}\left(\sum_{i \in I_{j}} h_{i}+\lambda\right) w_{j}^{2}\right]+\gamma T \end{aligned}$</p><ul><li>把样本 i 归类到所在的叶子节点 j 上，改写目标函数的形式如上</li></ul><p>w的解析解：$w_{j}^{*}=-\frac{\sum_{i \in I_{j}} g_{i}}{\sum_{i \in I_{j}} h_{i}+\lambda}$</p><p>代入可得到：$\tilde{\mathcal{L}}^{(t)}(q)=-\frac{1}{2} \sum_{j=1}^{T} \frac{\left(\sum_{i \in I_{j}} g_{i}\right)^{2}}{\sum_{i \in I_{j}} h_{i}+\lambda}+\gamma T$</p><h3 id="LightGBM"><a href="#LightGBM" class="headerlink" title="LightGBM"></a>LightGBM</h3><h2 id="算法学习"><a href="#算法学习" class="headerlink" title="算法学习"></a>算法学习</h2><h4 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#简单建模</span></span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line">model = LinearRegression(normalize=<span class="literal">True</span>)</span><br><span class="line">model = model.fit(train_X, train_y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看训练的线性回归模型的截距（intercept）与权重(coef)</span></span><br><span class="line"><span class="string">'intercept:'</span>+ str(model.intercept_)</span><br><span class="line">sorted(dict(zip(continuous_feature_names, model.coef_)).items(), key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>], reverse=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#绘制特征v_9的值与标签的散点图</span></span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line">subsample_index = np.random.randint(low=<span class="number">0</span>, high=len(train_y), size=<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">plt.scatter(train_X[<span class="string">'v_9'</span>][subsample_index], train_y[subsample_index], color=<span class="string">'black'</span>)</span><br><span class="line">plt.scatter(train_X[<span class="string">'v_9'</span>][subsample_index], model.predict(train_X.loc[subsample_index]), color=<span class="string">'blue'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'v_9'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'price'</span>)</span><br><span class="line">plt.legend([<span class="string">'True Price'</span>,<span class="string">'Predicted Price'</span>],loc=<span class="string">'upper right'</span>)</span><br><span class="line">print(<span class="string">'The predicted price is obvious different from true price'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>观察标签分布。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line">print(<span class="string">'It is clear to see the price shows a typical exponential distribution'</span>)</span><br><span class="line">plt.figure(figsize=(<span class="number">15</span>,<span class="number">5</span>))</span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">sns.distplot(train_y)</span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">sns.distplot(train_y[train_y &lt; np.quantile(train_y, <span class="number">0.9</span>)])</span><br></pre></td></tr></table></figure><p>log(x+1)变换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">train_y_ln = np.log(train_y + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line">print(<span class="string">'The transformed price seems like normal distribution'</span>)</span><br><span class="line">plt.figure(figsize=(<span class="number">15</span>,<span class="number">5</span>))</span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">sns.distplot(train_y_ln)</span><br><span class="line">plt.subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">sns.distplot(train_y_ln[train_y_ln &lt; np.quantile(train_y_ln, <span class="number">0.9</span>)])</span><br></pre></td></tr></table></figure><p>再次拟合验证</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">model = model.fit(train_X, train_y_ln)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'intercept:'</span>+ str(model.intercept_))</span><br><span class="line">sorted(dict(zip(continuous_feature_names, model.coef_)).items(), key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>], reverse=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h4 id="五折交叉验证"><a href="#五折交叉验证" class="headerlink" title="五折交叉验证"></a>五折交叉验证</h4><blockquote><p>不会把所有的数据集都拿来训练，而是分出一部分来（这一部分不参加训练）对训练集生成的参数进行测试，相对客观的判断这些参数对训练集之外的数据的符合程度。这种思想就称为交叉验证（Cross Validation）</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> cross_val_score</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_absolute_error,  make_scorer</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log_transfer</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(y, yhat)</span>:</span></span><br><span class="line">        result = func(np.log(y), np.nan_to_num(np.log(yhat)))</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line">    </span><br><span class="line"> <span class="comment">#使用线性回归模型，对未处理标签的特征数据进行五折交叉验证   </span></span><br><span class="line">scores = cross_val_score(model, X=train_X, y=train_y, verbose=<span class="number">1</span>, cv = <span class="number">5</span>, scoring=make_scorer(log_transfer(mean_absolute_error)))</span><br><span class="line">print(<span class="string">'AVG:'</span>, np.mean(scores))</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用线性回归模型，对处理过标签的特征数据进行五折交叉验证</span></span><br><span class="line">scores = cross_val_score(model, X=train_X, y=train_y_ln, verbose=<span class="number">1</span>, cv = <span class="number">5</span>, scoring=make_scorer(mean_absolute_error))</span><br><span class="line">print(<span class="string">'AVG:'</span>, np.mean(scores))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">scores = pd.DataFrame(scores.reshape(<span class="number">1</span>,<span class="number">-1</span>))</span><br><span class="line">scores.columns = [<span class="string">'cv'</span> + str(x) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">6</span>)]</span><br><span class="line">scores.index = [<span class="string">'MAE'</span>]</span><br><span class="line">scores</span><br></pre></td></tr></table></figure><h4 id="绘制学习率曲线与验证曲线"><a href="#绘制学习率曲线与验证曲线" class="headerlink" title="绘制学习率曲线与验证曲线"></a>绘制学习率曲线与验证曲线</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> learning_curve, validation_curve</span><br><span class="line">? learning_curve</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_learning_curve</span><span class="params">(estimator, title, X, y, ylim=None, cv=None,n_jobs=<span class="number">1</span>, train_size=np.linspace<span class="params">(<span class="number">.1</span>, <span class="number">1.0</span>, <span class="number">5</span> )</span>)</span>:</span>  </span><br><span class="line">    plt.figure()  </span><br><span class="line">    plt.title(title)  </span><br><span class="line">    <span class="keyword">if</span> ylim <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:  </span><br><span class="line">        plt.ylim(*ylim)  </span><br><span class="line">    plt.xlabel(<span class="string">'Training example'</span>)  </span><br><span class="line">    plt.ylabel(<span class="string">'score'</span>)  </span><br><span class="line">    train_sizes, train_scores, test_scores = learning_curve(estimator, X, y, cv=cv, n_jobs=n_jobs, train_sizes=train_size, scoring = make_scorer(mean_absolute_error))  </span><br><span class="line">    train_scores_mean = np.mean(train_scores, axis=<span class="number">1</span>)  </span><br><span class="line">    train_scores_std = np.std(train_scores, axis=<span class="number">1</span>)  </span><br><span class="line">    test_scores_mean = np.mean(test_scores, axis=<span class="number">1</span>)  </span><br><span class="line">    test_scores_std = np.std(test_scores, axis=<span class="number">1</span>)  </span><br><span class="line">    plt.grid()<span class="comment">#区域  </span></span><br><span class="line">    plt.fill_between(train_sizes, train_scores_mean - train_scores_std,  </span><br><span class="line">                     train_scores_mean + train_scores_std, alpha=<span class="number">0.1</span>,  </span><br><span class="line">                     color=<span class="string">"r"</span>)  </span><br><span class="line">    plt.fill_between(train_sizes, test_scores_mean - test_scores_std,  </span><br><span class="line">                     test_scores_mean + test_scores_std, alpha=<span class="number">0.1</span>,  </span><br><span class="line">                     color=<span class="string">"g"</span>)  </span><br><span class="line">    plt.plot(train_sizes, train_scores_mean, <span class="string">'o-'</span>, color=<span class="string">'r'</span>,  </span><br><span class="line">             label=<span class="string">"Training score"</span>)  </span><br><span class="line">    plt.plot(train_sizes, test_scores_mean,<span class="string">'o-'</span>,color=<span class="string">"g"</span>,  </span><br><span class="line">             label=<span class="string">"Cross-validation score"</span>)  </span><br><span class="line">    plt.legend(loc=<span class="string">"best"</span>)  </span><br><span class="line">    <span class="keyword">return</span> plt  </span><br><span class="line"> </span><br><span class="line">plot_learning_curve(LinearRegression(), <span class="string">'Liner_model'</span>, train_X[:<span class="number">1000</span>], train_y_ln[:<span class="number">1000</span>], ylim=(<span class="number">0.0</span>, <span class="number">0.5</span>), cv=<span class="number">5</span>, n_jobs=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="多模型对比"><a href="#多模型对比" class="headerlink" title="多模型对比"></a>多模型对比</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">train = sample_feature[continuous_feature_names + [<span class="string">'price'</span>]].dropna()</span><br><span class="line"></span><br><span class="line">train_X = train[continuous_feature_names]</span><br><span class="line">train_y = train[<span class="string">'price'</span>]</span><br><span class="line">train_y_ln = np.log(train_y + <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>嵌入式选择最常用的是L1正则化与L2正则化。在对线性回归模型加入两种正则化方法后，他们分别变成了岭回归与Lasso回归。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> Ridge</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> Lasso</span><br><span class="line"></span><br><span class="line">models = [LinearRegression(),</span><br><span class="line">          Ridge(),</span><br><span class="line">          Lasso()]</span><br><span class="line">          </span><br><span class="line">result = dict()</span><br><span class="line"><span class="keyword">for</span> model <span class="keyword">in</span> models:</span><br><span class="line">    model_name = str(model).split(<span class="string">'('</span>)[<span class="number">0</span>]</span><br><span class="line">    scores = cross_val_score(model, X=train_X, y=train_y_ln, verbose=<span class="number">0</span>, cv = <span class="number">5</span>, scoring=make_scorer(mean_absolute_error))</span><br><span class="line">    result[model_name] = scores</span><br><span class="line">    print(model_name + <span class="string">' is finished'</span>)</span><br><span class="line">    </span><br><span class="line">result = pd.DataFrame(result)</span><br><span class="line">result.index = [<span class="string">'cv'</span> + str(x) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">6</span>)]</span><br><span class="line">result</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">model = LinearRegression().fit(train_X, train_y_ln)</span><br><span class="line">print(<span class="string">'intercept:'</span>+ str(model.intercept_))</span><br><span class="line">sns.barplot(abs(model.coef_), continuous_feature_names)</span><br></pre></td></tr></table></figure><p>L2正则化在拟合过程中通常都倾向于让权值尽可能小，最后构造一个所有参数都比较小的模型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">model = Ridge().fit(train_X, train_y_ln)</span><br><span class="line">print(<span class="string">'intercept:'</span>+ str(model.intercept_))</span><br><span class="line">sns.barplot(abs(model.coef_), continuous_feature_names)</span><br></pre></td></tr></table></figure><p>L1正则化有助于生成一个稀疏权值矩阵，进而可以用于特征选择。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">model = Lasso().fit(train_X, train_y_ln)</span><br><span class="line">print(<span class="string">'intercept:'</span>+ str(model.intercept_))</span><br><span class="line">sns.barplot(abs(model.coef_), continuous_feature_names)</span><br></pre></td></tr></table></figure><h3 id="部分常用非线性模型"><a href="#部分常用非线性模型" class="headerlink" title="部分常用非线性模型"></a>部分常用非线性模型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC</span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeRegressor</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestRegressor</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> GradientBoostingRegressor</span><br><span class="line"><span class="keyword">from</span> sklearn.neural_network <span class="keyword">import</span> MLPRegressor</span><br><span class="line"><span class="keyword">from</span> xgboost.sklearn <span class="keyword">import</span> XGBRegressor</span><br><span class="line"><span class="keyword">from</span> lightgbm.sklearn <span class="keyword">import</span> LGBMRegressor</span><br><span class="line"></span><br><span class="line">models = [LinearRegression(),</span><br><span class="line">          DecisionTreeRegressor(),</span><br><span class="line">          RandomForestRegressor(),</span><br><span class="line">          GradientBoostingRegressor(),</span><br><span class="line">          MLPRegressor(solver=<span class="string">'lbfgs'</span>, max_iter=<span class="number">100</span>), </span><br><span class="line">          XGBRegressor(n_estimators = <span class="number">100</span>, objective=<span class="string">'reg:squarederror'</span>), </span><br><span class="line">          LGBMRegressor(n_estimators = <span class="number">100</span>)]</span><br><span class="line">          </span><br><span class="line">result = dict()</span><br><span class="line"><span class="keyword">for</span> model <span class="keyword">in</span> models:</span><br><span class="line">    model_name = str(model).split(<span class="string">'('</span>)[<span class="number">0</span>]</span><br><span class="line">    scores = cross_val_score(model, X=train_X, y=train_y_ln, verbose=<span class="number">0</span>, cv = <span class="number">5</span>, scoring=make_scorer(mean_absolute_error))</span><br><span class="line">    result[model_name] = scores</span><br><span class="line">    print(model_name + <span class="string">' is finished'</span>)</span><br><span class="line">    </span><br><span class="line">result = pd.DataFrame(result)</span><br><span class="line">result.index = [<span class="string">'cv'</span> + str(x) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">6</span>)]</span><br><span class="line">result</span><br></pre></td></tr></table></figure><h3 id="模型调参"><a href="#模型调参" class="headerlink" title="模型调参"></a>模型调参</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## LGB的参数集合：</span></span><br><span class="line"></span><br><span class="line">objective = [<span class="string">'regression'</span>, <span class="string">'regression_l1'</span>, <span class="string">'mape'</span>, <span class="string">'huber'</span>, <span class="string">'fair'</span>]</span><br><span class="line"></span><br><span class="line">num_leaves = [<span class="number">3</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">20</span>,<span class="number">40</span>, <span class="number">55</span>]</span><br><span class="line">max_depth = [<span class="number">3</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">20</span>,<span class="number">40</span>, <span class="number">55</span>]</span><br><span class="line">bagging_fraction = []</span><br><span class="line">feature_fraction = []</span><br><span class="line">drop_rate = []</span><br></pre></td></tr></table></figure><ul><li><h4 id="贪心调参"><a href="#贪心调参" class="headerlink" title="贪心调参"></a>贪心调参</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">best_obj = dict()</span><br><span class="line"><span class="keyword">for</span> obj <span class="keyword">in</span> objective:</span><br><span class="line">    model = LGBMRegressor(objective=obj)</span><br><span class="line">    score = np.mean(cross_val_score(model, X=train_X, y=train_y_ln, verbose=<span class="number">0</span>, cv = <span class="number">5</span>, scoring=make_scorer(mean_absolute_error)))</span><br><span class="line">    best_obj[obj] = score</span><br><span class="line">    </span><br><span class="line">best_leaves = dict()</span><br><span class="line"><span class="keyword">for</span> leaves <span class="keyword">in</span> num_leaves:</span><br><span class="line">    model = LGBMRegressor(objective=min(best_obj.items(), key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>])[<span class="number">0</span>], num_leaves=leaves)</span><br><span class="line">    score = np.mean(cross_val_score(model, X=train_X, y=train_y_ln, verbose=<span class="number">0</span>, cv = <span class="number">5</span>, scoring=make_scorer(mean_absolute_error)))</span><br><span class="line">    best_leaves[leaves] = score</span><br><span class="line">    </span><br><span class="line">best_depth = dict()</span><br><span class="line"><span class="keyword">for</span> depth <span class="keyword">in</span> max_depth:</span><br><span class="line">    model = LGBMRegressor(objective=min(best_obj.items(), key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>])[<span class="number">0</span>],</span><br><span class="line">                          num_leaves=min(best_leaves.items(), key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>])[<span class="number">0</span>],</span><br><span class="line">                          max_depth=depth)</span><br><span class="line">    score = np.mean(cross_val_score(model, X=train_X, y=train_y_ln, verbose=<span class="number">0</span>, cv = <span class="number">5</span>, scoring=make_scorer(mean_absolute_error)))</span><br><span class="line">    best_depth[depth] = score</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"> sns.lineplot(x=[<span class="string">'0_initial'</span>,<span class="string">'1_turning_obj'</span>,<span class="string">'2_turning_leaves'</span>,<span class="string">'3_turning_depth'</span>], y=[<span class="number">0.143</span> ,min(best_obj.values()), min(best_leaves.values()), min(best_depth.values())])</span><br></pre></td></tr></table></figure></li><li><h4 id="Grid-Search-调参"><a href="#Grid-Search-调参" class="headerlink" title="Grid Search 调参"></a>Grid Search 调参</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> GridSearchCV</span><br><span class="line"></span><br><span class="line">parameters = &#123;<span class="string">'objective'</span>: objective , <span class="string">'num_leaves'</span>: num_leaves, <span class="string">'max_depth'</span>: max_depth&#125;</span><br><span class="line">model = LGBMRegressor()</span><br><span class="line">clf = GridSearchCV(model, parameters, cv=<span class="number">5</span>)</span><br><span class="line">clf = clf.fit(train_X, train_y)</span><br><span class="line"></span><br><span class="line">clf.best_params_</span><br><span class="line">model = LGBMRegressor(objective=<span class="string">'regression'</span>,</span><br><span class="line">                          num_leaves=<span class="number">55</span>,</span><br><span class="line">                          max_depth=<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">np.mean(cross_val_score(model, X=train_X, y=train_y_ln, verbose=<span class="number">0</span>, cv = <span class="number">5</span>, scoring=make_scorer(mean_absolute_error)))</span><br></pre></td></tr></table></figure></li><li><h4 id="贝叶斯调参"><a href="#贝叶斯调参" class="headerlink" title="贝叶斯调参"></a>贝叶斯调参</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bayes_opt <span class="keyword">import</span> BayesianOptimization</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rf_cv</span><span class="params">(num_leaves, max_depth, subsample, min_child_samples)</span>:</span></span><br><span class="line">    val = cross_val_score(</span><br><span class="line">        LGBMRegressor(objective = <span class="string">'regression_l1'</span>,</span><br><span class="line">            num_leaves=int(num_leaves),</span><br><span class="line">            max_depth=int(max_depth),</span><br><span class="line">            subsample = subsample,</span><br><span class="line">            min_child_samples = int(min_child_samples)</span><br><span class="line">        ),</span><br><span class="line">        X=train_X, y=train_y_ln, verbose=<span class="number">0</span>, cv = <span class="number">5</span>, scoring=make_scorer(mean_absolute_error)</span><br><span class="line">    ).mean()</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> - val</span><br><span class="line">    </span><br><span class="line">rf_bo = BayesianOptimization(</span><br><span class="line">    rf_cv,</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="string">'num_leaves'</span>: (<span class="number">2</span>, <span class="number">100</span>),</span><br><span class="line">    <span class="string">'max_depth'</span>: (<span class="number">2</span>, <span class="number">100</span>),</span><br><span class="line">    <span class="string">'subsample'</span>: (<span class="number">0.1</span>, <span class="number">1</span>),</span><br><span class="line">    <span class="string">'min_child_samples'</span> : (<span class="number">2</span>, <span class="number">100</span>)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">rf_bo.maximize()</span><br><span class="line"><span class="number">1</span> - rf_bo.max[<span class="string">'target'</span>]</span><br></pre></td></tr></table></figure></li></ul><p>还采用了一些基本方法来提高预测的精度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize&#x3D;(13,5))</span><br><span class="line">sns.lineplot(x&#x3D;[&#39;0_origin&#39;,&#39;1_log_transfer&#39;,&#39;2_L1_&amp;_L2&#39;,&#39;3_change_model&#39;,&#39;4_parameter_turning&#39;], y&#x3D;[1.36 ,0.19, 0.19, 0.14, 0.13])</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基础学习：&quot;&gt;&lt;a href=&quot;#基础学习：&quot; class=&quot;headerlink&quot; title=&quot;基础学习：&quot;&gt;&lt;/a&gt;基础学习：&lt;/h2&gt;&lt;h4 id=&quot;Liner-Regression&quot;&gt;&lt;a href=&quot;#Liner-Regression&quot; class=&quot;
      
    
    </summary>
    
    
    
      <category term="数据挖掘" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/"/>
    
  </entry>
  
  <entry>
    <title>Task3_特种工程（学习打卡）</title>
    <link href="http://yoursite.com/2020/03/28/Task3-%E7%89%B9%E7%A7%8D%E5%B7%A5%E7%A8%8B/"/>
    <id>http://yoursite.com/2020/03/28/Task3-%E7%89%B9%E7%A7%8D%E5%B7%A5%E7%A8%8B/</id>
    <published>2020-03-28T02:27:11.000Z</published>
    <updated>2020-03-28T09:13:43.304Z</updated>
    
    <content type="html"><![CDATA[<h2 id="主要学习内容"><a href="#主要学习内容" class="headerlink" title="主要学习内容"></a>主要学习内容</h2><ol><li><p>异常处理：</p><ul><li><p>删除异常值：箱线图；3-Sigma</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outliers_proc</span><span class="params">(data, col_name, scale=<span class="number">3</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    用于清洗异常值，默认用 box_plot（scale=3）进行清洗</span></span><br><span class="line"><span class="string">    :param data: 接收 pandas 数据格式</span></span><br><span class="line"><span class="string">    :param col_name: pandas 列名</span></span><br><span class="line"><span class="string">    :param scale: 尺度</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">box_plot_outliers</span><span class="params">(data_ser, box_scale)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        利用箱线图去除异常值</span></span><br><span class="line"><span class="string">        :param data_ser: 接收 pandas.Series 数据格式</span></span><br><span class="line"><span class="string">        :param box_scale: 箱线图尺度，</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gd9q3wcdefj31200msgmz.jpg" alt="image-20200328163018012" style="zoom:33%;" /></p></li><li><p>处理有偏分布：BOX-COX 转换</p></li><li><p>长尾截断</p></li></ul></li><li><p>归一化/标准化：标准正态；[0,1]区间；幂律分布<script type="math/tex">\log \left(\frac{1+x}{1+\operatorname{med} i a n}\right)</script></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 取 log，做归一化</span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</span><br><span class="line">min_max_scaler = preprocessing.MinMaxScaler()</span><br><span class="line">data[<span class="string">'power'</span>] = np.log(data[<span class="string">'power'</span>] + <span class="number">1</span>) </span><br><span class="line">data[<span class="string">'power'</span>] = ((data[<span class="string">'power'</span>] - np.min(data[<span class="string">'power'</span>])) / (np.max(data[<span class="string">'power'</span>]) - np.min(data[<span class="string">'power'</span>])))</span><br><span class="line">data[<span class="string">'power'</span>].plot.hist()</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gd9qc8ouorj30mg0dkt97.jpg" alt="image-20200328163821458" style="zoom:33%;" /><img src="https://tva1.sinaimg.cn/large/00831rSTly1gd9qce93s1j30p80dmt95.jpg" alt="image-20200328163830133" style="zoom: 33%;" /></p></li><li><p>数据分桶</p><p><strong>优点：</strong></p><ul><li><p>离散后稀疏向量内积乘法运算速度更快，计算结果也方便存储，容易扩展；</p></li><li><p>离散后的特征对异常值更具鲁棒性</p></li><li><p>LR 属于广义线性模型，表达能力有限，经过离散化后，每个变量有单独的权重，相当于引入了非线性，能够提升模型的表达能力，加大拟合；</p></li><li><p>离散后特征可以进行特征交叉，提升表达能力</p></li><li><p>特征离散后模型更稳定</p></li></ul></li><li><p>缺失值处理:</p><ul><li>不处理(针对类似 XGBoost 等树模型);</li><li>删除（缺失太多）</li><li>插值补全</li><li>分箱，缺失值一个箱</li></ul></li><li><p>特征构造</p></li><li><p>特征筛选：</p><ul><li><p>过滤式(filter)：先对数据进行特征选择，然后在训练学习器，常见的方法有 Relief/方差选择发/相关系 数法/卡方检验法/互信息法;</p><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gd9qi3ejzdj30sy0psq55.jpg" alt="image-20200328164358998" style="zoom:33%;" /></p></li><li><p>包裹式(wrapper)：直接把最终将要使用的学习器的性能作为特征子集的评价准则，常见方法有 LVM(Las Vegas Wrapper) ;</p></li><li><p>嵌入式(embedding):结合过滤式和包裹式，学习器训练过程中自动进行了特征选择，常见的有 lasso 回归;</p></li></ul></li><li><p>数据降维</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;主要学习内容&quot;&gt;&lt;a href=&quot;#主要学习内容&quot; class=&quot;headerlink&quot; title=&quot;主要学习内容&quot;&gt;&lt;/a&gt;主要学习内容&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;异常处理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;删除异常值：箱线图；3-Sigma&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
    
      <category term="数据挖掘" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/"/>
    
  </entry>
  
  <entry>
    <title>Task1_赛题理解</title>
    <link href="http://yoursite.com/2020/03/24/%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98-Task1-%E8%B5%9B%E9%A2%98%E7%90%86%E8%A7%A3/"/>
    <id>http://yoursite.com/2020/03/24/%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98-Task1-%E8%B5%9B%E9%A2%98%E7%90%86%E8%A7%A3/</id>
    <published>2020-03-24T02:27:11.000Z</published>
    <updated>2020-03-28T09:18:59.230Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-1-题目说明"><a href="#1-1-题目说明" class="headerlink" title="1.1 题目说明"></a>1.1 题目说明</h2><p>数据来自某交易平台的二手车交易记录，总数据量超过40w，包含31列变量信息，其中15列为匿名变量。从中抽取15万条作为训练集，5万条作为测试集A，5万条作为测试集B，同时会对name、model、brand和regionCode等信息进行脱敏。</p><h2 id="1-2-数据概况"><a href="#1-2-数据概况" class="headerlink" title="1.2 数据概况"></a>1.2 数据概况</h2><p><strong>train.csv</strong></p><ul><li>SaleID - 销售样本ID</li><li>name - 汽车编码</li><li>regDate - 汽车注册时间</li><li>model - 车型编码</li><li>brand - 品牌</li><li>bodyType - 车身类型</li><li>fuelType - 燃油类型</li><li>gearbox - 变速箱</li><li>power - 汽车功率</li><li>kilometer - 汽车行驶公里</li><li>notRepairedDamage - 汽车有尚未修复的损坏</li><li>regionCode - 看车地区编码</li><li>seller - 销售方</li><li>offerType - 报价类型</li><li>creatDate - 广告发布时间</li><li>price - 汽车价格</li><li>v_0’, ‘v_1’, ‘v_2’, ‘v_3’, ‘v_4’, ‘v_5’, ‘v_6’, ‘v_7’, ‘v_8’, ‘v_9’, ‘v_10’, ‘v_11’, ‘v_12’, ‘v_13’,’v_14’ 【匿名特征，包含v0-14在内15个匿名特征】</li></ul><h2 id="1-3-预测指标"><a href="#1-3-预测指标" class="headerlink" title="1.3 预测指标"></a>1.3 预测指标</h2><p><strong>Mean Absolute Error：</strong>$M A E=\frac{\sum_{i=1}^{n}\left|y_{i}-\hat{y}_{i}\right|}{n}$</p><p>其中$y_i$代表第i个样本的真实值，其中$y^i$代表第i个样本的预测值。</p><h4 id="分类算法常见的评估指标如下："><a href="#分类算法常见的评估指标如下：" class="headerlink" title="分类算法常见的评估指标如下："></a>分类算法常见的评估指标如下：</h4><ul><li>对于二类分类器/分类算法，评价指标主要有accuracy， [Precision，Recall，F-score，Pr曲线]，ROC-AUC曲线。</li><li>对于多类分类器/分类算法，评价指标主要有accuracy， [宏平均和微平均，F-score]。</li></ul><h4 id="对于回归预测类常见的评估指标如下"><a href="#对于回归预测类常见的评估指标如下" class="headerlink" title="对于回归预测类常见的评估指标如下:"></a>对于回归预测类常见的评估指标如下:</h4><ul><li><p>平均绝对误差（Mean Absolute Error，MAE）<script type="math/tex">M A E=\frac{1}{N} \sum_{i=1}^{N}\left|y_{i}-\hat{y}_{i}\right|</script></p></li><li><p>均方误差（Mean Squared Error，MSE）<script type="math/tex">M S E=\frac{1}{N} \sum_{i=1}^{N}\left(y_{i}-\hat{y}_{i}\right)^{2}</script></p></li><li><p>平均绝对百分误差（Mean Absolute Percentage Error，MAPE）</p></li><li><p>均方根误差（Root Mean Squared Error）</p></li><li><p>R2（R-Square）</p><p>残差平方和：<script type="math/tex">S S_{r e s}=\sum\left(y_{i}-\hat{y}_{i}\right)^{2}</script></p><p>总平均值:<script type="math/tex">S S_{t o t}=\sum\left(y_{i}-\bar{y}_{i}\right)^{2}</script></p><script type="math/tex; mode=display">R^{2}=1-\frac{S S_{r e s}}{S S_{t o t}}=1-\frac{\sum\left(y_{i}-\hat{y}_{i}\right)^{2}}{\sum\left(y_{i}-\bar{y}\right)^{2}}</script><blockquote><p>R2用于度量因变量的变异中可由自变量解释部分所占的比例，取值范围是 0~1，R2越接近1,表明回归平方和占总平方和的比例越大,回归线与各观测点越接近，用x的变化来解释y值变化的部分就越多,回归的拟合程度就越好。所以R2也称为拟合优度（Goodness of Fit）的统计量。</p></blockquote></li></ul><h2 id="2-代码示例"><a href="#2-代码示例" class="headerlink" title="2. 代码示例"></a>2. 代码示例</h2><h3 id="2-1-pandas读取数据"><a href="#2-1-pandas读取数据" class="headerlink" title="2.1 pandas读取数据"></a>2.1 pandas读取数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment">## 1) 载入训练集和测试集；</span></span><br><span class="line">path = <span class="string">'./datalab/231784/'</span></span><br><span class="line">Train_data = pd.read_csv(path+<span class="string">'used_car_train_20200313.csv'</span>, sep=<span class="string">' '</span>)</span><br><span class="line">Test_data = pd.read_csv(path+<span class="string">'used_car_testA_20200313.csv'</span>, sep=<span class="string">' '</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'Train data shape:'</span>,Train_data.shape)</span><br><span class="line">print(<span class="string">'TestA data shape:'</span>,Test_data.shape)</span><br></pre></td></tr></table></figure><h2 id="2-2-1-分类指标评价计算示例"><a href="#2-2-1-分类指标评价计算示例" class="headerlink" title="2.2.1 分类指标评价计算示例"></a>2.2.1 分类指标评价计算示例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## accuracy</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score</span><br><span class="line">y_pred = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">y_true = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">print(<span class="string">'ACC:'</span>,accuracy_score(y_true, y_pred))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## Precision,Recall,F1-score</span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> metrics</span><br><span class="line">y_pred = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">y_true = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">print(<span class="string">'Precision'</span>,metrics.precision_score(y_true, y_pred))</span><br><span class="line">print(<span class="string">'Recall'</span>,metrics.recall_score(y_true, y_pred))</span><br><span class="line">print(<span class="string">'F1-score:'</span>,metrics.f1_score(y_true, y_pred))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## AUC</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> roc_auc_score</span><br><span class="line">y_true = np.array([<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>])</span><br><span class="line">y_scores = np.array([<span class="number">0.1</span>, <span class="number">0.4</span>, <span class="number">0.35</span>, <span class="number">0.8</span>])</span><br><span class="line">print(<span class="string">'AUC socre:'</span>,roc_auc_score(y_true, y_scores))</span><br></pre></td></tr></table></figure><h2 id="2-2-2-回归指标评价计算示例"><a href="#2-2-2-回归指标评价计算示例" class="headerlink" title="2.2.2 回归指标评价计算示例"></a>2.2.2 回归指标评价计算示例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> metrics</span><br><span class="line"></span><br><span class="line"><span class="comment"># MAPE需要自己实现</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mape</span><span class="params">(y_true, y_pred)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> np.mean(np.abs((y_pred - y_true) / y_true))</span><br><span class="line"></span><br><span class="line">y_true = np.array([<span class="number">1.0</span>, <span class="number">5.0</span>, <span class="number">4.0</span>, <span class="number">3.0</span>, <span class="number">2.0</span>, <span class="number">5.0</span>, <span class="number">-3.0</span>])</span><br><span class="line">y_pred = np.array([<span class="number">1.0</span>, <span class="number">4.5</span>, <span class="number">3.8</span>, <span class="number">3.2</span>, <span class="number">3.0</span>, <span class="number">4.8</span>, <span class="number">-2.2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># MSE</span></span><br><span class="line">print(<span class="string">'MSE:'</span>,metrics.mean_squared_error(y_true, y_pred))</span><br><span class="line"><span class="comment"># RMSE</span></span><br><span class="line">print(<span class="string">'RMSE:'</span>,np.sqrt(metrics.mean_squared_error(y_true, y_pred)))</span><br><span class="line"><span class="comment"># MAE</span></span><br><span class="line">print(<span class="string">'MAE:'</span>,metrics.mean_absolute_error(y_true, y_pred))</span><br><span class="line"><span class="comment"># MAPE</span></span><br><span class="line">print(<span class="string">'MAPE:'</span>,mape(y_true, y_pred))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## R2-score</span></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> r2_score</span><br><span class="line">y_true = [<span class="number">3</span>, <span class="number">-0.5</span>, <span class="number">2</span>, <span class="number">7</span>]</span><br><span class="line">y_pred = [<span class="number">2.5</span>, <span class="number">0.0</span>, <span class="number">2</span>, <span class="number">8</span>]</span><br><span class="line">print(<span class="string">'R2-score:'</span>,r2_score(y_true, y_pred))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-1-题目说明&quot;&gt;&lt;a href=&quot;#1-1-题目说明&quot; class=&quot;headerlink&quot; title=&quot;1.1 题目说明&quot;&gt;&lt;/a&gt;1.1 题目说明&lt;/h2&gt;&lt;p&gt;数据来自某交易平台的二手车交易记录，总数据量超过40w，包含31列变量信息，其中15列为匿名
      
    
    </summary>
    
    
    
      <category term="数据挖掘" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/"/>
    
  </entry>
  
  <entry>
    <title>Task2_数据分析</title>
    <link href="http://yoursite.com/2020/03/24/%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98-Task2-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2020/03/24/%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98-Task2-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/</id>
    <published>2020-03-24T02:27:11.000Z</published>
    <updated>2020-03-28T09:16:09.795Z</updated>
    
    <content type="html"><![CDATA[<h2 id="EDA-Exploratory-Data-Analysis"><a href="#EDA-Exploratory-Data-Analysis" class="headerlink" title="EDA(Exploratory Data Analysis)"></a>EDA(Exploratory Data Analysis)</h2><blockquote><p>是指对已有的数据（特别是调查或观察得来的原始数据）在尽量少的先验假定下进行探索，通过作图、制表、方程拟合、计算特征量等手段探索数据的结构和规律的一种数据分析方法。</p></blockquote><ol><li>对于数据的初步分析（直接查看数据，或.sum(), .mean()，.descirbe()等统计函数）可以从：样本数量，训练集数量，是否有时间特征，是否是时许问题，特征所表示的含义（非匿名特征），特征类型（字符类似，int，float，time），特征的缺失情况（注意缺失的在数据中的表现形式，有些是空的有些是”NAN”符号等），特征的均值方差情况。</li><li>分析记录某些特征值缺失占比30%以上样本的缺失处理，有助于后续的模型验证和调节，分析特征应该是填充（填充方式是什么，均值填充，0填充，众数填充等），还是舍去，还是先做样本分类用不同的特征模型去预测。</li><li>对于异常值做专门的分析，分析特征异常的label是否为异常值（或者偏离均值较远或者事特殊符号）,异常值是否应该剔除，还是用正常值填充，是记录异常，还是机器本身异常等。</li><li>对于Label做专门的分析，分析标签的分布情况等。</li><li>进步分析可以通过对特征作图，特征和label联合做图（统计图，离散图），直观了解特征的分布情况，通过这一步也可以发现数据之中的一些异常值等，通过箱型图分析一些特征值的偏离情况，对于特征和特征联合作图，对于特征和label联合作图，分析其中的一些关联性。</li></ol><h2 id="本次学习打卡内容"><a href="#本次学习打卡内容" class="headerlink" title="本次学习打卡内容"></a>本次学习打卡内容</h2><ol><li><p>载入各种数据科学以及可视化库:</p><ul><li>数据科学库 pandas、numpy、scipy；</li><li>可视化库 matplotlib、seabon；</li><li>其他；</li></ul></li><li><p>载入数据：</p><ul><li><p>载入训练集和测试集；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">path = <span class="string">'./datalab/231784/'</span></span><br><span class="line">Train_data = pd.read_csv(path+<span class="string">'used_car_train_20200313.csv'</span>, sep=<span class="string">' '</span>)</span><br><span class="line">Test_data = pd.read_csv(path+<span class="string">'used_car_testA_20200313.csv'</span>, sep=<span class="string">' '</span>)</span><br></pre></td></tr></table></figure></li><li><p>简略观察数据(head()+shape)；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Train_data.head().append(Train_data.tail())</span><br><span class="line">Train_data.shape</span><br></pre></td></tr></table></figure></li></ul></li></ol><ol><li><p>数据总览:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Train_data.describe()</span><br><span class="line">Train_data.info()</span><br></pre></td></tr></table></figure><ul><li><p>通过describe()来熟悉数据的相关统计量。</p><p>describe种有每列的统计量，个数count、平均值mean、方差std、最小值min、中位数25% 50% 75% 、以及最大值，可以掌握数据的大概的范围以及每个值的异常值的判断</p></li><li><p>通过info()来熟悉数据类型，有助于了解是否存在除了nan以外的特殊符号异常</p></li></ul></li><li><p>判断数据缺失和异常</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Train_data.isnull().sum()</span><br><span class="line"></span><br><span class="line"><span class="comment"># nan可视化</span></span><br><span class="line">missing = Train_data.isnull().sum()</span><br><span class="line">missing = missing[missing &gt; <span class="number">0</span>]</span><br><span class="line">missing.sort_values(inplace=<span class="literal">True</span>)</span><br><span class="line">missing.plot.bar()</span><br></pre></td></tr></table></figure><ul><li><p>查看每列的存在缺省的情况</p></li><li><p>异常值检测</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Train_data.info()</span><br><span class="line">Train_data[&#39;notRepairedDamage&#39;].value_counts()</span><br></pre></td></tr></table></figure></li></ul></li><li><p>了解预测值的分布</p><ul><li><p>总体分布概况（无界约翰逊分布等）</p></li><li><p>查看skewness and kurtosis</p></li><li><p>查看预测值的具体频数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Train_data[<span class="string">'price'</span>]</span><br><span class="line">Train_data[<span class="string">'price'</span>].value_counts()</span><br><span class="line"></span><br><span class="line"><span class="comment">## 1) 总体分布概况（无界约翰逊分布等）</span></span><br><span class="line"><span class="keyword">import</span> scipy.stats <span class="keyword">as</span> st</span><br><span class="line">y = Train_data[<span class="string">'price'</span>]</span><br><span class="line">plt.figure(<span class="number">1</span>); plt.title(<span class="string">'Johnson SU'</span>)</span><br><span class="line">sns.distplot(y, kde=<span class="literal">False</span>, fit=st.johnsonsu)</span><br><span class="line">plt.figure(<span class="number">2</span>); plt.title(<span class="string">'Normal'</span>)</span><br><span class="line">sns.distplot(y, kde=<span class="literal">False</span>, fit=st.norm)</span><br><span class="line">plt.figure(<span class="number">3</span>); plt.title(<span class="string">'Log Normal'</span>)</span><br><span class="line">sns.distplot(y, kde=<span class="literal">False</span>, fit=st.lognorm)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 2) 查看skewness and kurtosis</span></span><br><span class="line">sns.distplot(Train_data[<span class="string">'price'</span>]);</span><br><span class="line">print(<span class="string">"Skewness: %f"</span> % Train_data[<span class="string">'price'</span>].skew())</span><br><span class="line">print(<span class="string">"Kurtosis: %f"</span> % Train_data[<span class="string">'price'</span>].kurt())</span><br><span class="line">sns.distplot(Train_data.skew(),color=<span class="string">'blue'</span>,axlabel =<span class="string">'Skewness'</span>)</span><br><span class="line">sns.distplot(Train_data.kurt(),color=<span class="string">'orange'</span>,axlabel =<span class="string">'Kurtness'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 3) 查看预测值的具体频数</span></span><br><span class="line">plt.hist(Train_data[<span class="string">'price'</span>], orientation = <span class="string">'vertical'</span>,histtype = <span class="string">'bar'</span>, color =<span class="string">'red'</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># log变换 z之后的分布较均匀，可以进行log变换进行预测，这也是预测问题常用的trick</span></span><br><span class="line">plt.hist(np.log(Train_data[<span class="string">'price'</span>]), orientation = <span class="string">'vertical'</span>,histtype = <span class="string">'bar'</span>, color =<span class="string">'red'</span>) </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gd2r2apj8jj30nc0e00t3.jpg" alt="image-20200322154426974" style="zoom: 33%;" /><img src="https://tva1.sinaimg.cn/large/00831rSTly1gd2r2hk0svj30n80dst94.jpg" alt="image-20200322154437733" style="zoom: 33%;" /></p><blockquote><p><strong>偏度（Skewness）</strong><br>是描述数据分布形态的统计量，其描述的是某总体取值分布的对称性，简单来说就是数据的不对称程度。</p><ul><li>Skewness = 0 ，分布形态与正态分布偏度相同。</li><li>Skewness &gt; 0 ，正偏差数值较大，为正偏或右偏。长尾巴拖在右边，数据右端有较多的极端值。</li><li>Skewness &lt; 0 ，负偏差数值较大，为负偏或左偏。长尾巴拖在左边，数据左端有较多的极端值。</li><li>数值的绝对值越大，表明数据分布越不对称，偏斜程度大。</li><li>偏度是三阶中心距计算出来的。<script type="math/tex">\gamma_{1}=\mathrm{E}\left[\left(\frac{X-\mu}{\sigma}\right)^{3}\right]=\frac{\mu_{3}}{\sigma^{3}}=\frac{\mathrm{E}\left[(X-\mu)^{3}\right]}{\left(\mathrm{E}\left[(X-\mu)^{2}\right]\right)^{3 / 2}}=\frac{\kappa_{3}}{\kappa_{2}^{3 / 2}}</script></li></ul><p><strong>峰度（Kurtosis）</strong><br>偏度是描述某变量所有取值分布形态陡缓程度的统计量，简单来说就是数据分布顶的尖锐程度。</p><ul><li>Kurtosis = 0 与正态分布的陡缓程度相同。</li><li>Kurtosis &gt; 0 比正态分布的高峰更加陡峭——尖顶峰。</li><li>urtosis&lt;0 比正态分布的高峰来得平台——平顶峰。</li><li>峰度是四阶标准矩计算出来的。<script type="math/tex">b_{1}=\frac{m_{3}}{s^{3}}=\frac{\frac{1}{n} \sum_{i=1}^{n}\left(x_{i}-\bar{x}\right)^{3}}{\sqrt{\frac{1}{n-1} \sum_{i=1}^{n}\left(x_{i}-\bar{x}\right)^{2}}}=\frac{\frac{1}{n} \sum_{i=1}^{n}\left(x_{i}-\bar{x}\right)^{3}}{\left[\frac{1}{n-1} \sum_{i=1}^{n}\left(x_{i}-\bar{x}\right)^{2}\right]^{3 / 2}}</script></li></ul></blockquote></li></ul></li><li><p>特征分为类别特征和数字特征，并对类别特征查看unique分布</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这个区别方式适用于没有直接label coding的数据</span></span><br><span class="line"><span class="comment"># 这里不适用，需要人为根据实际含义来区分</span></span><br><span class="line"><span class="comment"># 数字特征</span></span><br><span class="line"><span class="comment"># numeric_features = Train_data.select_dtypes(include=[np.number])</span></span><br><span class="line"><span class="comment"># numeric_features.columns</span></span><br><span class="line"><span class="comment"># # 类型特征</span></span><br><span class="line"><span class="comment"># categorical_features = Train_data.select_dtypes(include=[np.object])</span></span><br><span class="line"><span class="comment"># categorical_features.columns</span></span><br></pre></td></tr></table></figure><p>分离label即预测值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Y_train = Train_data[<span class="string">'price'</span>]</span><br><span class="line">numeric_features = [<span class="string">'power'</span>, <span class="string">'kilometer'</span>, <span class="string">'v_0'</span>, <span class="string">'v_1'</span>, <span class="string">'v_2'</span>, <span class="string">'v_3'</span>, <span class="string">'v_4'</span>, <span class="string">'v_5'</span>, <span class="string">'v_6'</span>, <span class="string">'v_7'</span>, <span class="string">'v_8'</span>, <span class="string">'v_9'</span>, <span class="string">'v_10'</span>, <span class="string">'v_11'</span>, <span class="string">'v_12'</span>, <span class="string">'v_13'</span>,<span class="string">'v_14'</span> ]</span><br><span class="line"></span><br><span class="line">categorical_features = [<span class="string">'name'</span>, <span class="string">'model'</span>, <span class="string">'brand'</span>, <span class="string">'bodyType'</span>, <span class="string">'fuelType'</span>, <span class="string">'gearbox'</span>, <span class="string">'notRepairedDamage'</span>, <span class="string">'regionCode'</span>,]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 特征nunique分布</span></span><br><span class="line"><span class="keyword">for</span> cat_fea <span class="keyword">in</span> categorical_features:</span><br><span class="line">    print(cat_fea + <span class="string">"的特征分布如下："</span>)</span><br><span class="line">    print(<span class="string">"&#123;&#125;特征有个&#123;&#125;不同的值"</span>.format(cat_fea, Train_data[cat_fea].nunique()))</span><br><span class="line">    print(Train_data[cat_fea].value_counts())</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>数字特征分析</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">numeric_features.append(&#39;price&#39;)</span><br><span class="line">numeric_features</span><br></pre></td></tr></table></figure><ul><li><p>相关性分析</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 1) 相关性分析</span></span><br><span class="line">price_numeric = Train_data[numeric_features]</span><br><span class="line">correlation = price_numeric.corr()</span><br><span class="line">print(correlation[<span class="string">'price'</span>].sort_values(ascending = <span class="literal">False</span>),<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">f , ax = plt.subplots(figsize = (<span class="number">7</span>, <span class="number">7</span>))</span><br><span class="line">plt.title(<span class="string">'Correlation of Numeric Features with Price'</span>,y=<span class="number">1</span>,size=<span class="number">16</span>)</span><br><span class="line">sns.heatmap(correlation,square = <span class="literal">True</span>,  vmax=<span class="number">0.8</span>)</span><br><span class="line"><span class="keyword">del</span> price_numeric[<span class="string">'price'</span>]</span><br></pre></td></tr></table></figure></li><li><p>查看几个特征得 偏度和峰值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 2) 查看几个特征得 偏度和峰值</span></span><br><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> numeric_features:</span><br><span class="line">    print(<span class="string">'&#123;:15&#125;'</span>.format(col), </span><br><span class="line">          <span class="string">'Skewness: &#123;:05.2f&#125;'</span>.format(Train_data[col].skew()) , </span><br><span class="line">          <span class="string">'   '</span> ,</span><br><span class="line">          <span class="string">'Kurtosis: &#123;:06.2f&#125;'</span>.format(Train_data[col].kurt())  </span><br><span class="line">         )</span><br></pre></td></tr></table></figure></li><li><p>每个数字特征得分布可视化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 3) 每个数字特征得分布可视化</span></span><br><span class="line">f = pd.melt(Train_data, value_vars=numeric_features)</span><br><span class="line">g = sns.FacetGrid(f, col=<span class="string">"variable"</span>,  col_wrap=<span class="number">2</span>, sharex=<span class="literal">False</span>, sharey=<span class="literal">False</span>)</span><br><span class="line">g = g.map(sns.distplot, <span class="string">"value"</span>)</span><br></pre></td></tr></table></figure></li><li><p>数字特征相互之间的关系可视化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 4) 数字特征相互之间的关系可视化</span></span><br><span class="line">sns.set()</span><br><span class="line">columns = [<span class="string">'price'</span>, <span class="string">'v_12'</span>, <span class="string">'v_8'</span> , <span class="string">'v_0'</span>, <span class="string">'power'</span>, <span class="string">'v_5'</span>,  <span class="string">'v_2'</span>, <span class="string">'v_6'</span>, <span class="string">'v_1'</span>, <span class="string">'v_14'</span>]</span><br><span class="line">sns.pairplot(Train_data[columns],size = <span class="number">2</span> ,kind =<span class="string">'scatter'</span>,diag_kind=<span class="string">'kde'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li><li><p>多变量互相回归关系可视化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 5) 多变量互相回归关系可视化</span></span><br><span class="line">fig, ((ax1, ax2), (ax3, ax4), (ax5, ax6), (ax7, ax8), (ax9, ax10)) = plt.subplots(nrows=<span class="number">5</span>, ncols=<span class="number">2</span>, figsize=(<span class="number">24</span>, <span class="number">20</span>))</span><br><span class="line"><span class="comment"># ['v_12', 'v_8' , 'v_0', 'power', 'v_5',  'v_2', 'v_6', 'v_1', 'v_14']</span></span><br><span class="line">v_12_scatter_plot = pd.concat([Y_train,Train_data[<span class="string">'v_12'</span>]],axis = <span class="number">1</span>)</span><br><span class="line">sns.regplot(x=<span class="string">'v_12'</span>,y = <span class="string">'price'</span>, data = v_12_scatter_plot,scatter= <span class="literal">True</span>, fit_reg=<span class="literal">True</span>, ax=ax1)</span><br><span class="line"></span><br><span class="line">v_8_scatter_plot = pd.concat([Y_train,Train_data[<span class="string">'v_8'</span>]],axis = <span class="number">1</span>)</span><br><span class="line">sns.regplot(x=<span class="string">'v_8'</span>,y = <span class="string">'price'</span>,data = v_8_scatter_plot,scatter= <span class="literal">True</span>, fit_reg=<span class="literal">True</span>, ax=ax2)</span><br><span class="line"></span><br><span class="line">v_0_scatter_plot = pd.concat([Y_train,Train_data[<span class="string">'v_0'</span>]],axis = <span class="number">1</span>)</span><br><span class="line">sns.regplot(x=<span class="string">'v_0'</span>,y = <span class="string">'price'</span>,data = v_0_scatter_plot,scatter= <span class="literal">True</span>, fit_reg=<span class="literal">True</span>, ax=ax3)</span><br><span class="line"></span><br><span class="line">power_scatter_plot = pd.concat([Y_train,Train_data[<span class="string">'power'</span>]],axis = <span class="number">1</span>)</span><br><span class="line">sns.regplot(x=<span class="string">'power'</span>,y = <span class="string">'price'</span>,data = power_scatter_plot,scatter= <span class="literal">True</span>, fit_reg=<span class="literal">True</span>, ax=ax4)</span><br><span class="line"></span><br><span class="line">v_5_scatter_plot = pd.concat([Y_train,Train_data[<span class="string">'v_5'</span>]],axis = <span class="number">1</span>)</span><br><span class="line">sns.regplot(x=<span class="string">'v_5'</span>,y = <span class="string">'price'</span>,data = v_5_scatter_plot,scatter= <span class="literal">True</span>, fit_reg=<span class="literal">True</span>, ax=ax5)</span><br><span class="line"></span><br><span class="line">v_2_scatter_plot = pd.concat([Y_train,Train_data[<span class="string">'v_2'</span>]],axis = <span class="number">1</span>)</span><br><span class="line">sns.regplot(x=<span class="string">'v_2'</span>,y = <span class="string">'price'</span>,data = v_2_scatter_plot,scatter= <span class="literal">True</span>, fit_reg=<span class="literal">True</span>, ax=ax6)</span><br><span class="line"></span><br><span class="line">v_6_scatter_plot = pd.concat([Y_train,Train_data[<span class="string">'v_6'</span>]],axis = <span class="number">1</span>)</span><br><span class="line">sns.regplot(x=<span class="string">'v_6'</span>,y = <span class="string">'price'</span>,data = v_6_scatter_plot,scatter= <span class="literal">True</span>, fit_reg=<span class="literal">True</span>, ax=ax7)</span><br><span class="line"></span><br><span class="line">v_1_scatter_plot = pd.concat([Y_train,Train_data[<span class="string">'v_1'</span>]],axis = <span class="number">1</span>)</span><br><span class="line">sns.regplot(x=<span class="string">'v_1'</span>,y = <span class="string">'price'</span>,data = v_1_scatter_plot,scatter= <span class="literal">True</span>, fit_reg=<span class="literal">True</span>, ax=ax8)</span><br><span class="line"></span><br><span class="line">v_14_scatter_plot = pd.concat([Y_train,Train_data[<span class="string">'v_14'</span>]],axis = <span class="number">1</span>)</span><br><span class="line">sns.regplot(x=<span class="string">'v_14'</span>,y = <span class="string">'price'</span>,data = v_14_scatter_plot,scatter= <span class="literal">True</span>, fit_reg=<span class="literal">True</span>, ax=ax9)</span><br><span class="line"></span><br><span class="line">v_13_scatter_plot = pd.concat([Y_train,Train_data[<span class="string">'v_13'</span>]],axis = <span class="number">1</span>)</span><br><span class="line">sns.regplot(x=<span class="string">'v_13'</span>,y = <span class="string">'price'</span>,data = v_13_scatter_plot,scatter= <span class="literal">True</span>, fit_reg=<span class="literal">True</span>, ax=ax10)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>类型特征分析</p><ul><li><p>unique分布</p></li><li><p>类别特征箱形图可视化</p></li><li><p>类别特征的小提琴图可视化</p></li><li><p>类别特征的柱形图可视化类别</p></li><li><p>特征的每个类别频数可视化(count_plot)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 1) unique分布</span></span><br><span class="line"><span class="keyword">for</span> fea <span class="keyword">in</span> categorical_features:</span><br><span class="line">    print(Train_data[fea].nunique())</span><br><span class="line"></span><br><span class="line">categorical_features</span><br><span class="line"></span><br><span class="line"><span class="comment">## 2) 类别特征箱形图可视化</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 因为 name和 regionCode的类别太稀疏了，这里我们把不稀疏的几类画一下</span></span><br><span class="line">categorical_features = [<span class="string">'model'</span>,</span><br><span class="line"> <span class="string">'brand'</span>,</span><br><span class="line"> <span class="string">'bodyType'</span>,</span><br><span class="line"> <span class="string">'fuelType'</span>,</span><br><span class="line"> <span class="string">'gearbox'</span>,</span><br><span class="line"> <span class="string">'notRepairedDamage'</span>]</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> categorical_features:</span><br><span class="line">    Train_data[c] = Train_data[c].astype(<span class="string">'category'</span>)</span><br><span class="line">    <span class="keyword">if</span> Train_data[c].isnull().any():</span><br><span class="line">        Train_data[c] = Train_data[c].cat.add_categories([<span class="string">'MISSING'</span>])</span><br><span class="line">        Train_data[c] = Train_data[c].fillna(<span class="string">'MISSING'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">boxplot</span><span class="params">(x, y, **kwargs)</span>:</span></span><br><span class="line">    sns.boxplot(x=x, y=y)</span><br><span class="line">    x=plt.xticks(rotation=<span class="number">90</span>)</span><br><span class="line"></span><br><span class="line">f = pd.melt(Train_data, id_vars=[<span class="string">'price'</span>], value_vars=categorical_features)</span><br><span class="line">g = sns.FacetGrid(f, col=<span class="string">"variable"</span>,  col_wrap=<span class="number">2</span>, sharex=<span class="literal">False</span>, sharey=<span class="literal">False</span>, size=<span class="number">5</span>)</span><br><span class="line">g = g.map(boxplot, <span class="string">"value"</span>, <span class="string">"price"</span>)</span><br><span class="line"></span><br><span class="line">Train_data.columns</span><br><span class="line"></span><br><span class="line"><span class="comment">## 3) 类别特征的小提琴图可视化</span></span><br><span class="line">catg_list = categorical_features</span><br><span class="line">target = <span class="string">'price'</span></span><br><span class="line"><span class="keyword">for</span> catg <span class="keyword">in</span> catg_list :</span><br><span class="line">    sns.violinplot(x=catg, y=target, data=Train_data)</span><br><span class="line">    plt.show()</span><br><span class="line">    </span><br><span class="line">categorical_features = [<span class="string">'model'</span>,</span><br><span class="line"> <span class="string">'brand'</span>,</span><br><span class="line"> <span class="string">'bodyType'</span>,</span><br><span class="line"> <span class="string">'fuelType'</span>,</span><br><span class="line"> <span class="string">'gearbox'</span>,</span><br><span class="line"> <span class="string">'notRepairedDamage'</span>]</span><br><span class="line"> </span><br><span class="line"> <span class="comment">## 4) 类别特征的柱形图可视化</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar_plot</span><span class="params">(x, y, **kwargs)</span>:</span></span><br><span class="line">    sns.barplot(x=x, y=y)</span><br><span class="line">    x=plt.xticks(rotation=<span class="number">90</span>)</span><br><span class="line"></span><br><span class="line">f = pd.melt(Train_data, id_vars=[<span class="string">'price'</span>], value_vars=categorical_features)</span><br><span class="line">g = sns.FacetGrid(f, col=<span class="string">"variable"</span>,  col_wrap=<span class="number">2</span>, sharex=<span class="literal">False</span>, sharey=<span class="literal">False</span>, size=<span class="number">5</span>)</span><br><span class="line">g = g.map(bar_plot, <span class="string">"value"</span>, <span class="string">"price"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">##  5) 类别特征的每个类别频数可视化(count_plot)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_plot</span><span class="params">(x,  **kwargs)</span>:</span></span><br><span class="line">    sns.countplot(x=x)</span><br><span class="line">    x=plt.xticks(rotation=<span class="number">90</span>)</span><br><span class="line"></span><br><span class="line">f = pd.melt(Train_data,  value_vars=categorical_features)</span><br><span class="line">g = sns.FacetGrid(f, col=<span class="string">"variable"</span>,  col_wrap=<span class="number">2</span>, sharex=<span class="literal">False</span>, sharey=<span class="literal">False</span>, size=<span class="number">5</span>)</span><br><span class="line">g = g.map(count_plot, <span class="string">"value"</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>用pandas_profiling生成数据报告</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import pandas_profiling</span><br><span class="line">pfr &#x3D; pandas_profiling.ProfileReport(Train_data)</span><br><span class="line">pfr.to_file(&quot;.&#x2F;example.html&quot;)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;EDA-Exploratory-Data-Analysis&quot;&gt;&lt;a href=&quot;#EDA-Exploratory-Data-Analysis&quot; class=&quot;headerlink&quot; title=&quot;EDA(Exploratory Data Analysis)&quot;&gt;&lt;/
      
    
    </summary>
    
    
    
      <category term="数据挖掘" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/"/>
    
  </entry>
  
  <entry>
    <title>Information-Extraction</title>
    <link href="http://yoursite.com/2020/03/14/Information-Extraction/"/>
    <id>http://yoursite.com/2020/03/14/Information-Extraction/</id>
    <published>2020-03-14T06:55:06.726Z</published>
    <updated>2020-03-14T09:51:11.405Z</updated>
    
    <content type="html"><![CDATA[<p><strong>NER作为序列标记</strong></p><p>指定的标记同时捕获边界和类型。序列分类器(如MEMM/CRF或bi-LSTM)被训练为在文本中使用标记来标记标记，这些标记表示特定类型的命名实体的存在。</p><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gctgr2ewzoj30qu0ki1dr.jpg" alt="image-20200314145732575"></p><p><strong>IO encoding</strong>简单的为每个 token 标注，如果不是 NE 就标为 O(other)，所以一共需要 C+1 个类别(label)。而<strong>IOB encoding</strong>需要 2C+1 个类别(label)，因为它标了 NE boundary，B 代表 begining，NE 开始的位置，I 代表 continue，承接上一个 NE，如果连续出现两个 B，自然就表示上一个 B 已经结束了。</p><ul><li>提取特征并训练<strong>词性标记类型的MEMM或CRF序列模型</strong></li></ul><blockquote><p>由于汉语的特殊性，除了词汇层面的特征外，汉字层面的特征也被充分地用来辅助提高NER的效果.</p><p>由于汉语分词和NER的密切联系，有研究发现分词结果可以有效地提高汉语NER的效果。</p><p>研究表明，在模型不变的情况下，全局信息和外部知识确实可以显著地提高识别的效果。维基百科知识是最常见且有效的外部知识，而在汉语NER中，知网作为一个汉语特有的词汇语义知识库，也被充分地应用在NER研究中。</p></blockquote><p><strong>关系抽取</strong></p><p><strong>关系抽取</strong>需要从文本中抽取两个或多个实体之间的语义关系，主要方法有下面几类：</p><ul><li><p><strong>基于模板的方法(hand-written patterns)</strong></p></li><li><ul><li>基于触发词/字符串</li><li>基于依存句法</li></ul></li><li><p><strong>监督学习(supervised machine learning)</strong></p></li><li><ul><li>机器学习</li><li>深度学习（Pipeline vs Joint Model）</li></ul></li><li><p><strong>半监督/无监督学习(semi-supervised and unsupervised)</strong></p></li><li><ul><li>Bootstrapping</li><li>Distant supervision</li><li>Unsupervised learning from the web</li></ul></li></ul><p>监督学习去做关系提取的过程如下：首先特定的关系和命名实体已经选择了，训练集语料手动去标注关系和命名实体，接着就是注释的语料就是用来去训练分类器去标注没有见过的训练集。</p><p>最直接的方法有3步：</p><ul><li>第一步，找寻一对命名实体。通常在一句话中。</li><li>第二步，二元分类器的作用是用来判断两个命名实体之间是否有关系</li><li>第三步，分类器将用来去标记命名实体之间的关系</li></ul><p><strong>监督学习-深度学习</strong></p><p>深度学习方法又分为两大类，pipeline 和 joint model</p><ul><li><strong>Pipeline</strong><br>把实体识别和关系分类作为两个完全独立的过程，不会相互影响，关系的识别依赖于实体识别的效果</li><li><strong>Joint Model</strong><br>实体识别和关系分类的过程共同优化</li></ul><p>深度学习用到的特征通常有：</p><ul><li>Position embeddings</li><li>Word embeddings</li><li>Knowledge embeddings</li></ul><p>模型通常有 CNN/RNN + attention，损失函数 ranking loss 要优于交叉熵。</p><p><strong>远程监督：</strong></p><p>Mintz<strong>提出一个假设</strong>，如果知识库中存在某个实体对的某种关系，那么所有包含此对实体的数据都表达这个关系。理论上，这让关系抽取的工作大大简化。但<strong>远程监督</strong>也有<strong>副作用</strong>，因为不用人为的标注，只能机械地依赖外部知识库，而外部知识库会将同一对实体的所有情况都会标注一种关系，其标签的准确度就会大大的降低。</p><p><strong>EALO</strong>(Expressed-at-least-once)假设：如果知识库中存在某个实体对的某种关系，那么至少有一个提到此对实体的数据表达此种关系。</p><p><strong>主流</strong>的<strong>关系抽取模型</strong>几乎都在使用<strong>引入多示例学习</strong>的<strong>远程监督</strong>方法，<strong>再结合</strong>深度学习,卷积神经网络（convolutional neural networks, CNN）肩负着主要任务。</p><p><strong>多示例学习</strong>是一种<strong>监督学习</strong>模式.可以对具有某种特征的数据样本集合打标签，这样的样本集合称为<strong>袋（bag)</strong>. 每个bag有标签，而每个bag中含有多个数据样本，每个样本即为一个示例（instance)。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;NER作为序列标记&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;指定的标记同时捕获边界和类型。序列分类器(如MEMM/CRF或bi-LSTM)被训练为在文本中使用标记来标记标记，这些标记表示特定类型的命名实体的存在。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://t
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
